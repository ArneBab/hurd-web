%TOC% %STARTINCLUDE%

## <a name="TWiki_Plugins"> TWiki Plugins </a>

Plugin use and development; about the Plugin API.

### <a name="Overview"> Overview </a>

You can add Plugins to greatly extend TWiki's functionality, without alering the program core. With a plug-in approach, you can:

* add virtually unlimited features while keeping the main TWiki code compact and efficient;
* heavily customize an installation and still do clean updates to new versions of TWiki;
* rapidly develop new TWiki functions in Perl using the Plugin API.

Everything to do with TWiki Plugins - demos, new releases, downloads, development, general discussion - is available at TWiki.org, in the **[[TWikiPlugins]]**.

### <a name="Preinstalled_Plugins"> Preinstalled Plugins </a>

TWiki comes with three Plugins as part of the standard installation.

* **DefaultPlugin** handles some legacy TWiki variables that may be present in long-established sites. This option can be controlled from %TWIKIWEB%.TWikiPreferences. (Perl programmers can also add rules for simple custom processing.)

* **EmptyPlug** is a fully functional module, minus active code; it does nothing and serves as a template for new Plugin development.

* **InterwikiPlugin** is preinstalled but can be disabled or removed. Use it for quick linking to to remote sites: <code>**TWiki:Plugins**</code> expands to TWiki:Plugins on TWiki.org. You can add your own shortcuts and URLs to the existing directory of Wiki-related and other probably useful sites.

<a name="InstallPlugin"></a>

### <a name="Installing_Plugins"> Installing Plugins </a>

Each TWikiPlugin comes with full documentation: step-by-step installation instructions, a detailed description of any special requirements, version details, and a working example for testing.

Most Plugins can be installed in three easy steps, with no programming skills required:

1. **Download** the zip file containing the Plugin, documentation, and any other required files, from TWiki:Plugins.
2. **Distribute** the files to their proper locations - unzip the zip archive in your TWiki installation directory - if have a standard TWiki installation, this will distribute automatically. Otherwise, place the files according to the directory paths listed on the Plugin top in TWiki:Plugins.
3. **Check** the demo example on the Plugin topic: if it's working, the installation was fine!

**Special Requests:** Some Plugins need certain Perl modules to be preinstalled on the host system. Plugins may also use other resources, like graphics, other modules, applications, templates. In these cases, detailed instructions are in the Plugin documentation.

Each Plugin has a standard release page, located in the TWiki:Plugins web at TWiki.org. In addition to the documentation topic (<code>**SomePlugin**</code>), there's a separate development page.

* **Doc page:** Read all available info about the Plugin; download the attached distribution files.
* **Dev page:** Post feature requests, bug reports and general dev comments; topic title ends in <code>**Dev**</code> (<code>**SomePluginDev**</code>).
* **User support:** Post installation, how to use type questions (and answers, if you have them) in the TWiki:Support web.

#### <a name="On_Site_Pretesting"> On-Site Pretesting </a>

To test new Plugins on your installation before making them public, you may want to use one of these two approaches:

* **Method 1:** Create Production and a Test installation of TWiki.
  * Duplicate the <code>**twiki/bin**</code> and <code>**twiki/lib**</code> directories for the Test version, adjusting the paths in the new <code>**lib/TWiki.cfg**</code>, the <code>**twiki/data**</code>; the <code>**twiki/templates**</code> and <code>**twiki/pub**</code> directories are shared.
  * Test Plugins and other new features in the Test installation until you're satisfied.
  * Copy the modified files to the Production installation. You can update a live TWiki installation and users won't even notice.

* **Method 2:** List the Plugin under <code>**Test**</code> in the DISABLEDPLUGINS variable in %TWIKIWEB%.TWikiPreferences. Redefine the DISABLEDPLUGINS variable in the Test web and do the testing there.

### <a name="Managing_Plugins"> Managing Plugins </a>

Ideally, after you've installed a Plugin, just read the instructions and you're set. In fact, some Plugins require additional settings or offer extra options that you can modify on Preferences pages. You may want to make a Plugin available only in certain webs, or temporarily disable it. And having to list all available Plugins will probably come up. You can handle all of these with simple procedures.

#### <a name="Setting_Preferences"> Setting Preferences </a>

Installed Plugins can be **toggled on or off**, site-wide or by web, through TWikiPreferences and individual WebPreferences:

* All Plugin modules present in the <code>**lib/TWiki/Plugins**</code> directory are activated automatically unless disabled by the <code>**DISABLEDPLUGINS**</code> Preferences variable in TWikiPreferences. You can optionally list the installed Plugins in the <code>**INSTALLEDPLUGINS**</code> Preferences variable. This is useful to define the sequence of Plugin execution, or to specify other webs than the %WIKITOOLNAME% web for the Plugin topics. Settings in %TWIKIWEB%.TWikiPreferences are:
  * <code>**Set INSTALLEDPLUGINS = DefaultPlugin, ...**</code>
  * <code>**Set DISABLEDPLUGINS = EmptyPlugin, ...**</code>

**Plugin execution order** in TWiki is determined by searching Plugin topics in a specific sequence: First, full <code>**web.topicname**</code> name, if specified in <code>**INSTALLEDPLUGINS**</code>; next, the %TWIKIWEB% web is searched; and finally, the current web.

**Plugin-specific settings** are done in individual Plugin topics. Two settings are standard for each Plugin:

1. One line description, used to form the bullets describing the Plugins in the %TWIKIWEB%.TextFormattingRules topic:
  * <code>**Set SHORTDESCRIPTION = Blah blah woof woof.**</code>
2. Debug Plugin, output can be seen in <code>**data/debug.txt**</code>. Set to 0=off or 1=on:
  * <code>**Set DEBUG = 0**</code>

* The settings can be retrieved as Preferences variables like <code>**%&lt;pluginname&gt;\_&lt;var&gt;%**</code>, ex: <code>**%DEFAULTPLUGIN\_SHORTDESCRIPTION%**</code> shows the description of the DefaultPlugin.

#### <a name="Listing_Active_Plugins"> Listing Active Plugins </a>

Plugin status variables let you list all active Plugins wherever needed. There are two list formats:

* The <code>**%ACTIVATEDPLUGINS%**</code> variable lists activated Plugins by name. (This variable is displayed in %TWIKIWEB%.TWikiPreferences for debugging use.)
* The <code>**%PLUGINDESCRIPTIONS%**</code> variable displays a bullet list with a one-line description of each active Plugins. This variable is based on the <code>**%&lt;plugin&gt;\_SHORTDESCRIPTION%**</code> Preferences variables of individual topics and is shown in %TWIKIWEB%.TextFormattingRules.

> 
>
> <code>**%ACTIVATEDPLUGINS%**</code><br /> On this TWiki site, the active Plugins are: %ACTIVATEDPLUGINS%.
>
> <code>**%PLUGINDESCRIPTIONS%**</code><br /> You can use any of these active TWiki Plugins: %PLUGINDESCRIPTIONS%

<a name="PluginAPI"></a>

### <a name="The_TWiki_Plugin_API"> </a> The TWiki Plugin API

The Application Programming Interface (API) for TWikiPlugins provides the specifications for hooking into the core TWiki code from your external Perl Plugin module. The Plugin API is new to the Production version of TWiki with the TWikiReleaseSpring2001.

#### <a name="Available_Core_Functions"> Available Core Functions </a>

The <code>**lib/TWiki/Func.pm**</code> implements ALL official Plugin functions. Plugins should ONLY use functions published in this module.

 If you use functions not in <code>**Func.pm**</code>, you run the risk of creating security holes. Also, your Plugin will likely break and require updating when you upgrade to a new version of TWiki.

* For best performance, enable only the functions you really need. NOTE: <code>**outsidePREHandler**</code> and <code>**insidePREHandler**</code> are particularly expensive.

#### <a name="Predefined_Hooks"> Predefined Hooks </a>

In addition to TWiki core functions, Plugins can use **predefined hooks**, or **call backs**, listed in the <code>**lib/TWiki/Plugins/EmptyPlugin.pm**</code> module.

* All but the initPlugin are disabled. To enable a call back, remove <code>**DISABLE\_**</code> from the function name.

#### <a name="Plugin_Version_Detection"> Plugin Version Detection </a>

To eliminate the incompatibility problems bound to arise from active open Plugin development, a Plugin versioning system and an API <code>**GetVersion**</code> detection routine are provided for automatic compatibility checking.

* All modules require a <code>**$VERSION='0.000'**</code> variable, beginning at <code>**1\.000**</code>.

* The <code>**initPlugin**</code> handler should check all dependencies and return TRUE if the initialization is OK or FALSE if something went wrong.
  * The Plugin initialization code does not register a Plugin that returns FALSE (or that has no <code>**initPlugin**</code> handler).

* <code>**$VERSION='1.000'**</code> is the current setting in <code>**TWiki::Plugins.pm**</code> and in the preinstalled system Plugins ([[DefaultPlugin]], [[EmptyPlugin]], [[InterwikiPlugin]]).

<a name="CreatePlugins"></a>

### <a name="Creating_Plugins"> Creating Plugins </a>

With a reasonable knowledge of the Perl scripting language, you can create new Plugins or modify and extend existing ones. Basic plug-in architecture uses an Application Programming Interface (API), a set of software instructions that allow external code to interact with the main program. The TWiki Plugin API Plugins by providing a programming interface for TWiki.

#### <a name="The_DefaultPlugin_Alternative"> The DefaultPlugin Alternative </a>

* **DefaultPlugin** can handle some outdated TWiki variables, found, for example, in sites recently updated from an old version. Settings are in %TWIKIWEB%.TWikiPreferences. You can also add your own simple custom processing rules here, though in all but very simple cases, writing a new Plugin is preferable.

#### <a name="Anatomy_of_a_Plugin"> Anatomy of a Plugin </a>

A basic TWiki Plugin consists of two elements:

* a Perl module, ex: <code>**YourPlugin.pm**</code>
* a documentation topic, ex: <code>**YourPlugin.txt**</code>

The Perl module can be a block of code that connects with TWiki alone, or it can include other elements, like other Perl modules (including other Plugins), graphics, TWiki templates, external applications (ex: a Java applet), or just about anything else it can call. In particular, files that should be web-accessible (graphics, Java applets ...) are best placed as attachments of the <code>**YourPlugin**</code> topic. Other needed Perl code is best placed in a <code>**lib/TWiki/Plugins/YourPlugin/**</code> directory.

The Plugin API handles the details of connecting your Perl module with main TWiki code. When you're familiar with the Plugin API, you're ready to develop Plugins.

#### <a name="Creating_the_Perl_Module"> Creating the Perl Module </a>

Copy file ([`EmptyPlugin.pm`](http://twiki.org/lib/TWiki/Plugins/EmptyPlugin.pm) to <code>**&lt;name&gt;Plugin.pm**</code> `=EmptyPlugin.pm=` contains no executable code, so it does nothing, but it's ready to be used. Customize it. Refer to the Plugin API specs for more information.

<a name="CreatePluginTopic"></a>

#### <a name="Writing_the_Documentation_Topic"> Writing the Documentation Topic </a>

The Plugin documentation topic contains usage instructions and version details. It serves the Plugin files as %TWIKIWEB%.FileAttachments for downloading. (The doc topic is also included _in_ the distribution package.) To create a documentation topic:

1. **Copy** the Plugin topic template from <http://TWiki.org/cgi-bin/view/TWiki/EmptyPlugin>. To copy the text, go to the page and:
  * click Edit
  * select all in the Edit box &amp; copy
  * Cancel the edit
  * paste &amp; save as a text file or new topic on your site
2. **Customize** the template for your Plugin; you'll probably want to post a working version on your local TWiki site.
3. **Save** your topic as a text file, for use in packaging and publishing your Plugin.

> 
>
> <br />
>
> Check
>
> 
>
> [[TWIKIWEBEmptyPlugin]]
>
> on TWiki.org for the latest Plugin doc topic template. Here's a quick overview of what's covered:
>
> **Syntax Rules:** Describe any special text formatting that will be rendered.
>
> **YourPlugin Settings:** Description and settings for your custom Plugin %VARIABLES%, and those required by TWiki.
>
> Plugins Preferences work exactly like %TWIKIWEB%.TWikiPreferences and [[WebPreferences]]: six (6) spaces and then:
>
> * * Set EXAMPLE = got it!
>
> **How-to Instructions:** Step-by-step set-up guide, user help, whatever it takes to install and run, goes here.
>
> **Test Example:** Include an example of the Plugin in action: if it works, the installation was a success!
>
> **Plugin Info:** Version, credits, history, requirements - entered in a form, displayed as a table. Both are automatically generated when you create or edit a page in the TWiki:Plugins web.

<a name="CreatePluginPackage"></a>

#### <a name="Packaging_for_Distribution"> Packaging for Distribution </a>

A minimum Plugin release consists of a Perl module with a [[TWiki/WikiName]] that ends in <code>**Plugin**</code>, ex: <code>**YourPlugin.pm**</code>, and a documentation page with the same name(<code>**YourPlugin.txt**</code>).

1. Distribute your Plugin files in a directory structure that mirrors TWiki. If your Plugin uses additional files, include them ALL:
  * <code>**lib/TWiki/Plugins/YourPlugin.pm**</code>
  * <code>**data/TWiki/YourPlugin.txt**</code>
  * <code>**pub/TWiki/YourPlugin/uparrow.gif**</code> [a required graphic]
2. Create a zip archive with the Plugin name (<code>**YourPlugin.zip**</code>) and add the entire directory structure from Step 1. Your archive should look like this:
  * <code>**lib/TWiki/Plugins/YourPlugin.pm**</code>
  * <code>**data/TWiki/YourPlugin.txt**</code>
  * <code>**pub/TWiki/YourPlugin/uparrow.gif**</code>

<a name="PublishPlugin"></a>

#### <a name="Publishing_for_Public_Use"> Publishing for Public Use </a>

You can release your tested, packaged Plugin to the TWiki community through the TWiki:Plugins web, where all Plugins submitted to TWiki.org are available for download and further development discussion. Publish your Plugin in three steps:

1. **Post** the Plugin documentation topic in the TWiki:Plugins web:
  * create a new topic using the Plugin name, ex: <code>**YourPlugin.txt**</code>;
  * paste in the topic text from Creating Plugin Documentation and Save.
2. **Attach** the distribution zip file to the topic, ex: <code>**YourPlugin.zip**</code>.
3. **Link** from the doc page to a new, blank page named after the Plugin, and ending in <code>**Dev**</code>, ex: <code>**YourPluginDev**</code>. This is the discussion page for future development. (User support for Plugins is handled in TWiki:Support.)

-- [[AndreaSterbini]] - 29 May 2001 <br /> -- [[MikeMannix]] - 01 Sep 2001
