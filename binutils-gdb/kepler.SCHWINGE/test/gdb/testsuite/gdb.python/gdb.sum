Test Run By thomas on Wed Jan  8 00:24:23 2014
Native configuration is i686-pc-linux-gnu

		=== gdb tests ===

Schedule of variations:
    unix

Running target unix
Running ../../../W._C._Handy/gdb/testsuite/gdb.python/lib-types.exp ...
PASS: gdb.python/lib-types.exp: python import gdb.types
PASS: gdb.python/lib-types.exp: python const_class1_obj = gdb.parse_and_eval ('const_class1_obj')
PASS: gdb.python/lib-types.exp: python basic_type_const_class1_obj = gdb.types.get_basic_type (const_class1_obj.type)
PASS: gdb.python/lib-types.exp: python print (str (const_class1_obj.type))
PASS: gdb.python/lib-types.exp: const stripping
PASS: gdb.python/lib-types.exp: python volatile_class1_obj = gdb.parse_and_eval ('volatile_class1_obj')
PASS: gdb.python/lib-types.exp: python basic_type_volatile_class1_obj = gdb.types.get_basic_type (volatile_class1_obj.type)
PASS: gdb.python/lib-types.exp: python print (str (volatile_class1_obj.type))
PASS: gdb.python/lib-types.exp: volatile stripping
PASS: gdb.python/lib-types.exp: python const_volatile_class1_obj = gdb.parse_and_eval ('const_volatile_class1_obj')
PASS: gdb.python/lib-types.exp: python basic_type_const_volatile_class1_obj = gdb.types.get_basic_type (const_volatile_class1_obj.type)
PASS: gdb.python/lib-types.exp: python print (str (const_volatile_class1_obj.type))
PASS: gdb.python/lib-types.exp: volatile+const stripping
PASS: gdb.python/lib-types.exp: python typedef_class1_obj = gdb.parse_and_eval ('typedef_class1_obj')
PASS: gdb.python/lib-types.exp: python basic_type_typedef_class1_obj = gdb.types.get_basic_type (typedef_class1_obj.type)
PASS: gdb.python/lib-types.exp: python print (str (typedef_class1_obj.type))
PASS: gdb.python/lib-types.exp: typedef stripping
PASS: gdb.python/lib-types.exp: python class1_ref_obj = gdb.parse_and_eval ('class1_ref_obj')
PASS: gdb.python/lib-types.exp: python basic_type_class1_ref_obj = gdb.types.get_basic_type (class1_ref_obj.type)
PASS: gdb.python/lib-types.exp: python print (str (class1_ref_obj.type))
PASS: gdb.python/lib-types.exp: reference stripping
PASS: gdb.python/lib-types.exp: python typedef_const_typedef_class1_obj = gdb.parse_and_eval ('typedef_const_typedef_class1_obj')
PASS: gdb.python/lib-types.exp: python basic_type_typedef_const_typedef_class1_obj = gdb.types.get_basic_type (typedef_const_typedef_class1_obj.type)
PASS: gdb.python/lib-types.exp: python print (str (typedef_class1_obj.type))
PASS: gdb.python/lib-types.exp: nested typedef stripping
PASS: gdb.python/lib-types.exp: python typedef_const_typedef_class1_ref_obj = gdb.parse_and_eval ('typedef_const_typedef_class1_ref_obj')
PASS: gdb.python/lib-types.exp: python basic_type_typedef_const_typedef_class1_ref_obj = gdb.types.get_basic_type (typedef_const_typedef_class1_ref_obj.type)
PASS: gdb.python/lib-types.exp: python print (str (typedef_const_typedef_class1_ref_obj.type))
PASS: gdb.python/lib-types.exp: nested typedef/ref stripping
PASS: gdb.python/lib-types.exp: python class1_obj = gdb.parse_and_eval ('class1_obj')
PASS: gdb.python/lib-types.exp: python print (gdb.types.has_field (class1_obj.type, 'x'))
PASS: gdb.python/lib-types.exp: python print (gdb.types.has_field (class1_obj.type, 'nope'))
PASS: gdb.python/lib-types.exp: python subclass1_obj = gdb.parse_and_eval ('subclass1_obj')
PASS: gdb.python/lib-types.exp: python print (gdb.types.has_field (subclass1_obj.type, 'x'))
PASS: gdb.python/lib-types.exp: python enum1_obj = gdb.parse_and_eval ('enum1_obj')
PASS: gdb.python/lib-types.exp: python enum1_dict = gdb.types.make_enum_dict (enum1_obj.type)
PASS: gdb.python/lib-types.exp: python enum1_list = sorted (enum1_dict.items ())
PASS: gdb.python/lib-types.exp: python print (enum1_list)
PASS: gdb.python/lib-types.exp: python struct_a = gdb.lookup_type ('struct A')
PASS: gdb.python/lib-types.exp: python print (struct_a.keys ())
PASS: gdb.python/lib-types.exp: python print ([k for k,v in gdb.types.deep_items(struct_a)])
Running ../../../W._C._Handy/gdb/testsuite/gdb.python/py-arch.exp ...
PASS: gdb.python/py-arch.exp: Test empty architecture.name does not trigger an assert
PASS: gdb.python/py-arch.exp: Test empty architecture.disassemble does not trigger an assert
PASS: gdb.python/py-arch.exp: test number of instructions 1
PASS: gdb.python/py-arch.exp: test number of instructions 2
PASS: gdb.python/py-arch.exp: test number of instructions 3
PASS: gdb.python/py-arch.exp: test number of instructions 4
PASS: gdb.python/py-arch.exp: test key addr
PASS: gdb.python/py-arch.exp: test key asm
PASS: gdb.python/py-arch.exp: test key length
PASS: gdb.python/py-arch.exp: test exception
Running ../../../W._C._Handy/gdb/testsuite/gdb.python/py-block.exp ...
PASS: gdb.python/py-block.exp: continue to breakpoint: Block break here.
PASS: gdb.python/py-block.exp: Check block not None
PASS: gdb.python/py-block.exp: First anonymous block
PASS: gdb.python/py-block.exp: Check start not None
PASS: gdb.python/py-block.exp: Check end not None
PASS: gdb.python/py-block.exp: Not a global block
PASS: gdb.python/py-block.exp: Not a static block
PASS: gdb.python/py-block.exp: Get block
PASS: gdb.python/py-block.exp: Get block
PASS: gdb.python/py-block.exp: Is the global block
PASS: gdb.python/py-block.exp: Is the static block
PASS: gdb.python/py-block.exp: Get superblock
PASS: gdb.python/py-block.exp: Second anonymous block
PASS: gdb.python/py-block.exp: Get superblock 2
PASS: gdb.python/py-block.exp: Print superblock 2 function
PASS: gdb.python/py-block.exp: up
PASS: gdb.python/py-block.exp: Check Frame 2's block not None
PASS: gdb.python/py-block.exp: main block
PASS: gdb.python/py-block.exp: Check block validity
PASS: gdb.python/py-block.exp: Check block validity
PASS: gdb.python/py-block.exp: Check block validity
PASS: gdb.python/py-block.exp: Check block validity
Running ../../../W._C._Handy/gdb/testsuite/gdb.python/py-breakpoint.exp ...
PASS: gdb.python/py-breakpoint.exp: Check obj exists
PASS: gdb.python/py-breakpoint.exp: Check breakpoint location
PASS: gdb.python/py-breakpoint.exp: continue to breakpoint: Break at multiply.
PASS: gdb.python/py-breakpoint.exp: Check for two breakpoints
PASS: gdb.python/py-breakpoint.exp: Check obj exists
PASS: gdb.python/py-breakpoint.exp: Check breakpoint location
PASS: gdb.python/py-breakpoint.exp: Check obj exists
PASS: gdb.python/py-breakpoint.exp: Check breakpoint location
PASS: gdb.python/py-breakpoint.exp: Check breakpoint hit count
PASS: gdb.python/py-breakpoint.exp: continue to breakpoint: Break at multiply.
PASS: gdb.python/py-breakpoint.exp: Check breakpoint hit count
PASS: gdb.python/py-breakpoint.exp: Check expected variable result after 6 iterations
PASS: gdb.python/py-breakpoint.exp: continue to breakpoint: Break at add.
PASS: gdb.python/py-breakpoint.exp: Check breakpoint enabled.
PASS: gdb.python/py-breakpoint.exp: continue to breakpoint: Break at add.
PASS: gdb.python/py-breakpoint.exp: continue to breakpoint: Break at multiply.
PASS: gdb.python/py-breakpoint.exp: Check breakpoint thread
PASS: gdb.python/py-breakpoint.exp: Check breakpoint type
PASS: gdb.python/py-breakpoint.exp: Check breakpoint number
PASS: gdb.python/py-breakpoint.exp: Check breakpoint number
PASS: gdb.python/py-breakpoint.exp: Check breakpoint number
PASS: gdb.python/py-breakpoint.exp: Number of breakpoints before delete
PASS: gdb.python/py-breakpoint.exp: continue to breakpoint: Break at multiply.
PASS: gdb.python/py-breakpoint.exp: Check breakpoint invalidated
PASS: gdb.python/py-breakpoint.exp: Number of breakpoints after delete
PASS: gdb.python/py-breakpoint.exp: continue to breakpoint: Break at end.
PASS: gdb.python/py-breakpoint.exp: continue to breakpoint: Break at multiply.
PASS: gdb.python/py-breakpoint.exp: Test conditional has been set
PASS: gdb.python/py-breakpoint.exp: continue to breakpoint: Break at multiply.
PASS: gdb.python/py-breakpoint.exp: Test conditional breakpoint stopped after five iterations
PASS: gdb.python/py-breakpoint.exp: Test conditional read
PASS: gdb.python/py-breakpoint.exp: continue to breakpoint: Break at multiply.
PASS: gdb.python/py-breakpoint.exp: Test breakpoint stopped after six iterations
PASS: gdb.python/py-breakpoint.exp: commands $bpnum
PASS: gdb.python/py-breakpoint.exp: print "Command for breakpoint has been executed."
PASS: gdb.python/py-breakpoint.exp: print result
PASS: gdb.python/py-breakpoint.exp: end
PASS: gdb.python/py-breakpoint.exp: python print (blist[len(blist)-1].commands)
PASS: gdb.python/py-breakpoint.exp: Check invisible bp obj exists
PASS: gdb.python/py-breakpoint.exp: Check breakpoint location
PASS: gdb.python/py-breakpoint.exp: Check breakpoint visibility
PASS: gdb.python/py-breakpoint.exp: Check info breakpoints shows visible breakpoints
PASS: gdb.python/py-breakpoint.exp: Check invisible bp obj exists
PASS: gdb.python/py-breakpoint.exp: Check breakpoint location
PASS: gdb.python/py-breakpoint.exp: Check breakpoint visibility
PASS: gdb.python/py-breakpoint.exp: Check info breakpoints does not show invisible breakpoints
PASS: gdb.python/py-breakpoint.exp: Check maint info breakpoints shows invisible breakpoints
PASS: gdb.python/py-breakpoint.exp: Test watchpoint write
PASS: gdb.python/py-breakpoint.exp: Check info breakpoints does not show invisible breakpoints
PASS: gdb.python/py-breakpoint.exp: Check maint info breakpoints shows invisible breakpoints
PASS: gdb.python/py-breakpoint.exp: Test watchpoint write
PASS: gdb.python/py-breakpoint.exp: Sub-class a breakpoint - python
PASS: gdb.python/py-breakpoint.exp: Sub-class a breakpoint - class bp_eval (gdb.Breakpoint):
PASS: gdb.python/py-breakpoint.exp: Sub-class a breakpoint -    inf_i = 0
PASS: gdb.python/py-breakpoint.exp: Sub-class a breakpoint -    count = 0
PASS: gdb.python/py-breakpoint.exp: Sub-class a breakpoint -    def stop (self):
PASS: gdb.python/py-breakpoint.exp: Sub-class a breakpoint -       self.count = self.count + 1
PASS: gdb.python/py-breakpoint.exp: Sub-class a breakpoint -       self.inf_i = gdb.parse_and_eval("i")
PASS: gdb.python/py-breakpoint.exp: Sub-class a breakpoint -       if self.inf_i == 3:
PASS: gdb.python/py-breakpoint.exp: Sub-class a breakpoint -         return True
PASS: gdb.python/py-breakpoint.exp: Sub-class a breakpoint -       return False
PASS: gdb.python/py-breakpoint.exp: Sub-class a breakpoint - end
PASS: gdb.python/py-breakpoint.exp: Sub-class a second breakpoint - python
PASS: gdb.python/py-breakpoint.exp: Sub-class a second breakpoint - class bp_also_eval (gdb.Breakpoint):
PASS: gdb.python/py-breakpoint.exp: Sub-class a second breakpoint -    count = 0
PASS: gdb.python/py-breakpoint.exp: Sub-class a second breakpoint -    def stop (self):
PASS: gdb.python/py-breakpoint.exp: Sub-class a second breakpoint -       self.count = self.count + 1
PASS: gdb.python/py-breakpoint.exp: Sub-class a second breakpoint -       if self.count == 9:
PASS: gdb.python/py-breakpoint.exp: Sub-class a second breakpoint -         return True
PASS: gdb.python/py-breakpoint.exp: Sub-class a second breakpoint -       return False
PASS: gdb.python/py-breakpoint.exp: Sub-class a second breakpoint - end
PASS: gdb.python/py-breakpoint.exp: Sub-class a third breakpoint - python
PASS: gdb.python/py-breakpoint.exp: Sub-class a third breakpoint - class basic (gdb.Breakpoint):
PASS: gdb.python/py-breakpoint.exp: Sub-class a third breakpoint -    count = 0
PASS: gdb.python/py-breakpoint.exp: Sub-class a third breakpoint - end
PASS: gdb.python/py-breakpoint.exp: continue to breakpoint: Break at multiply.
PASS: gdb.python/py-breakpoint.exp: Check inferior value matches python accounting
PASS: gdb.python/py-breakpoint.exp: Check python accounting matches inferior
PASS: gdb.python/py-breakpoint.exp: Check non firing same-location breakpoint eval function was also called at each stop.
PASS: gdb.python/py-breakpoint.exp: Check non firing same-location breakpoint eval function was also called at each stop.
PASS: gdb.python/py-breakpoint.exp: Check you cannot add a CLI condition to a Python breakpoint that
PASS: gdb.python/py-breakpoint.exp: Construct an eval function - python
PASS: gdb.python/py-breakpoint.exp: Construct an eval function - def stop_func ():
PASS: gdb.python/py-breakpoint.exp: Construct an eval function -    return True
PASS: gdb.python/py-breakpoint.exp: Construct an eval function - end
PASS: gdb.python/py-breakpoint.exp: Assign stop function to a breakpoint that has a condition
PASS: gdb.python/py-breakpoint.exp: Test that evaluate function has not been yet executed (ie count = 0)
PASS: gdb.python/py-breakpoint.exp: continue to breakpoint: Break at multiply.
PASS: gdb.python/py-breakpoint.exp: Test that evaluate function is run when location also has normal bp
PASS: gdb.python/py-breakpoint.exp: Sub-class a watchpoint - python
PASS: gdb.python/py-breakpoint.exp: Sub-class a watchpoint - class wp_eval (gdb.Breakpoint):
PASS: gdb.python/py-breakpoint.exp: Sub-class a watchpoint -    def stop (self):
PASS: gdb.python/py-breakpoint.exp: Sub-class a watchpoint -       self.result = gdb.parse_and_eval("result")
PASS: gdb.python/py-breakpoint.exp: Sub-class a watchpoint -       if self.result == 788:
PASS: gdb.python/py-breakpoint.exp: Sub-class a watchpoint -         return True
PASS: gdb.python/py-breakpoint.exp: Sub-class a watchpoint -       return False
PASS: gdb.python/py-breakpoint.exp: Sub-class a watchpoint - end
PASS: gdb.python/py-breakpoint.exp: Test watchpoint write
PASS: gdb.python/py-breakpoint.exp: Check that this unrelated breakpoints eval function was never called.
Running ../../../W._C._Handy/gdb/testsuite/gdb.python/py-cmd.exp ...
PASS: gdb.python/py-cmd.exp: input simple command - python
PASS: gdb.python/py-cmd.exp: input simple command - class test_cmd (gdb.Command):
PASS: gdb.python/py-cmd.exp: input simple command -   def __init__ (self):
PASS: gdb.python/py-cmd.exp: input simple command -     super (test_cmd, self).__init__ ("test_cmd", gdb.COMMAND_OBSCURE)
PASS: gdb.python/py-cmd.exp: input simple command -   def invoke (self, arg, from_tty):
PASS: gdb.python/py-cmd.exp: input simple command -     print ("test_cmd output, arg = %s" % arg)
PASS: gdb.python/py-cmd.exp: input simple command - test_cmd ()
PASS: gdb.python/py-cmd.exp: input simple command - end
PASS: gdb.python/py-cmd.exp: call simple command
PASS: gdb.python/py-cmd.exp: input prefix command - python
PASS: gdb.python/py-cmd.exp: input prefix command - class prefix_cmd (gdb.Command):
PASS: gdb.python/py-cmd.exp: input prefix command -   def __init__ (self):
PASS: gdb.python/py-cmd.exp: input prefix command -     super (prefix_cmd, self).__init__ ("prefix_cmd", gdb.COMMAND_OBSCURE, gdb.COMPLETE_NONE, True)
PASS: gdb.python/py-cmd.exp: input prefix command -   def invoke (self, arg, from_tty):
PASS: gdb.python/py-cmd.exp: input prefix command -     print ("prefix_cmd output, arg = %s" % arg)
PASS: gdb.python/py-cmd.exp: input prefix command - prefix_cmd ()
PASS: gdb.python/py-cmd.exp: input prefix command - end
PASS: gdb.python/py-cmd.exp: call prefix command
PASS: gdb.python/py-cmd.exp: input subcommand - python
PASS: gdb.python/py-cmd.exp: input subcommand - class subcmd (gdb.Command):
PASS: gdb.python/py-cmd.exp: input subcommand -   def __init__ (self):
PASS: gdb.python/py-cmd.exp: input subcommand -     super (subcmd, self).__init__ ("prefix_cmd subcmd", gdb.COMMAND_OBSCURE)
PASS: gdb.python/py-cmd.exp: input subcommand -   def invoke (self, arg, from_tty):
PASS: gdb.python/py-cmd.exp: input subcommand -     print ("subcmd output, arg = %s" % arg)
PASS: gdb.python/py-cmd.exp: input subcommand - subcmd ()
PASS: gdb.python/py-cmd.exp: input subcommand - end
PASS: gdb.python/py-cmd.exp: call subcmd
PASS: gdb.python/py-cmd.exp: input prefix command, keyword arguments - python
PASS: gdb.python/py-cmd.exp: input prefix command, keyword arguments - class prefix_cmd2 (gdb.Command):
PASS: gdb.python/py-cmd.exp: input prefix command, keyword arguments -   def __init__ (self):
PASS: gdb.python/py-cmd.exp: input prefix command, keyword arguments -     super (prefix_cmd2, self).__init__ ("prefix_cmd2", gdb.COMMAND_OBSCURE, prefix = True, completer_class = gdb.COMPLETE_FILENAME)
PASS: gdb.python/py-cmd.exp: input prefix command, keyword arguments -   def invoke (self, arg, from_tty):
PASS: gdb.python/py-cmd.exp: input prefix command, keyword arguments -     print ("prefix_cmd2 output, arg = %s" % arg)
PASS: gdb.python/py-cmd.exp: input prefix command, keyword arguments - prefix_cmd2 ()
PASS: gdb.python/py-cmd.exp: input prefix command, keyword arguments - end
PASS: gdb.python/py-cmd.exp: call prefix command, keyword arguments
PASS: gdb.python/py-cmd.exp: input subcommand under prefix_cmd2 - python
PASS: gdb.python/py-cmd.exp: input subcommand under prefix_cmd2 - class subcmd (gdb.Command):
PASS: gdb.python/py-cmd.exp: input subcommand under prefix_cmd2 -   def __init__ (self):
PASS: gdb.python/py-cmd.exp: input subcommand under prefix_cmd2 -     super (subcmd, self).__init__ ("prefix_cmd2 subcmd", gdb.COMMAND_OBSCURE)
PASS: gdb.python/py-cmd.exp: input subcommand under prefix_cmd2 -   def invoke (self, arg, from_tty):
PASS: gdb.python/py-cmd.exp: input subcommand under prefix_cmd2 -     print ("subcmd output, arg = %s" % arg)
PASS: gdb.python/py-cmd.exp: input subcommand under prefix_cmd2 - subcmd ()
PASS: gdb.python/py-cmd.exp: input subcommand under prefix_cmd2 - end
PASS: gdb.python/py-cmd.exp: call subcmd under prefix_cmd2
PASS: gdb.python/py-cmd.exp: input new subcommand - python
PASS: gdb.python/py-cmd.exp: input new subcommand - class newsubcmd (gdb.Command):
PASS: gdb.python/py-cmd.exp: input new subcommand -   def __init__ (self):
PASS: gdb.python/py-cmd.exp: input new subcommand -     super (newsubcmd, self).__init__ ("info newsubcmd", gdb.COMMAND_OBSCURE)
PASS: gdb.python/py-cmd.exp: input new subcommand -   def invoke (self, arg, from_tty):
PASS: gdb.python/py-cmd.exp: input new subcommand -     print ("newsubcmd output, arg = %s" % arg)
PASS: gdb.python/py-cmd.exp: input new subcommand - newsubcmd ()
PASS: gdb.python/py-cmd.exp: input new subcommand - end
PASS: gdb.python/py-cmd.exp: call newsubcmd
PASS: gdb.python/py-cmd.exp: input command to throw error - python
PASS: gdb.python/py-cmd.exp: input command to throw error - class test_error_cmd (gdb.Command):
PASS: gdb.python/py-cmd.exp: input command to throw error -   def __init__ (self):
PASS: gdb.python/py-cmd.exp: input command to throw error -     super (test_error_cmd, self).__init__ ("test_error_cmd", gdb.COMMAND_OBSCURE)
PASS: gdb.python/py-cmd.exp: input command to throw error -   def invoke (self, arg, from_tty):
PASS: gdb.python/py-cmd.exp: input command to throw error -     raise gdb.GdbError ('you lose!')
PASS: gdb.python/py-cmd.exp: input command to throw error - test_error_cmd ()
PASS: gdb.python/py-cmd.exp: input command to throw error - end
PASS: gdb.python/py-cmd.exp: call error command
PASS: gdb.python/py-cmd.exp: string_to_argv ("1 2 3")
PASS: gdb.python/py-cmd.exp: string_to_argv ("'1 2' 3")
PASS: gdb.python/py-cmd.exp: string_to_argv ('"1 2" 3')
PASS: gdb.python/py-cmd.exp: string_to_argv ('1\ 2 3')
PASS: gdb.python/py-cmd.exp: input simple user-defined command - python
PASS: gdb.python/py-cmd.exp: input simple user-defined command - class test_help (gdb.Command):
PASS: gdb.python/py-cmd.exp: input simple user-defined command -   """Docstring"""
PASS: gdb.python/py-cmd.exp: input simple user-defined command -   def __init__ (self):
PASS: gdb.python/py-cmd.exp: input simple user-defined command -     super (test_help, self).__init__ ("test_help", gdb.COMMAND_USER)
PASS: gdb.python/py-cmd.exp: input simple user-defined command -   def invoke (self, arg, from_tty):
PASS: gdb.python/py-cmd.exp: input simple user-defined command -     print ("test_cmd output, arg = %s" % arg)
PASS: gdb.python/py-cmd.exp: input simple user-defined command - test_help ()
PASS: gdb.python/py-cmd.exp: input simple user-defined command - end
PASS: gdb.python/py-cmd.exp: call simple user-defined command
PASS: gdb.python/py-cmd.exp: see user-defined command in `help user-defined`
Running ../../../W._C._Handy/gdb/testsuite/gdb.python/py-error.exp ...
PASS: gdb.python/py-error.exp: set host-charset IBM1047
PASS: gdb.python/py-error.exp: main reached
PASS: gdb.python/py-error.exp: no delayed error
Running ../../../W._C._Handy/gdb/testsuite/gdb.python/py-events.exp ...
PASS: gdb.python/py-events.exp: test-objfile-events
PASS: gdb.python/py-events.exp: New objfile notification
PASS: gdb.python/py-events.exp: test-events
PASS: gdb.python/py-events.exp: continue
PASS: gdb.python/py-events.exp: step 3
PASS: gdb.python/py-events.exp: Inferior 1 terminated.
PASS: gdb.python/py-events.exp: inferior 2
PASS: gdb.python/py-events.exp: Inferior 2 terminated.
Running ../../../W._C._Handy/gdb/testsuite/gdb.python/py-evsignal.exp ...
PASS: gdb.python/py-evsignal.exp: successfully compiled posix threads test case
PASS: gdb.python/py-evsignal.exp: test-events
PASS: gdb.python/py-evsignal.exp: set non-stop on
PASS: gdb.python/py-evsignal.exp: set target-async on
PASS: gdb.python/py-evsignal.exp: thread 3 was signaled
Running ../../../W._C._Handy/gdb/testsuite/gdb.python/py-evthreads.exp ...
PASS: gdb.python/py-evthreads.exp: successfully compiled posix threads test case
PASS: gdb.python/py-evthreads.exp: test-events
PASS: gdb.python/py-evthreads.exp: set non-stop on
PASS: gdb.python/py-evthreads.exp: set target-async on
PASS: gdb.python/py-evthreads.exp: Run to breakpoint 1
PASS: gdb.python/py-evthreads.exp: reached breakpoint 2
PASS: gdb.python/py-evthreads.exp: thread 2
PASS: gdb.python/py-evthreads.exp: reached breakpoint 3
PASS: gdb.python/py-evthreads.exp: thread 3
PASS: gdb.python/py-evthreads.exp: continue thread 1
PASS: gdb.python/py-evthreads.exp: thread 3 was signaled
Running ../../../W._C._Handy/gdb/testsuite/gdb.python/py-explore-cc.exp ...
PASS: gdb.python/py-explore-cc.exp: continue to breakpoint: Break here
PASS: gdb.python/py-explore-cc.exp: explore A
PASS: gdb.python/py-explore-cc.exp: explore a
PASS: gdb.python/py-explore-cc.exp: explore int_ref
PASS: gdb.python/py-explore-cc.exp: explore int_ptr_ref
PASS: gdb.python/py-explore-cc.exp: explore_int_ptr_ref_as_single_value_pointer
PASS: gdb.python/py-explore-cc.exp: explore b
PASS: gdb.python/py-explore-cc.exp: explore_base_class_A
PASS: gdb.python/py-explore-cc.exp: return_to_b_from_A
PASS: gdb.python/py-explore-cc.exp: explore_field_i_of_b
PASS: gdb.python/py-explore-cc.exp: return_to_b_from_i
PASS: gdb.python/py-explore-cc.exp: explore_field_c_of_b
PASS: gdb.python/py-explore-cc.exp: return_to_b_from_i
PASS: gdb.python/py-explore-cc.exp: return_to_gdb_prompt_from_b
PASS: gdb.python/py-explore-cc.exp: explore B
PASS: gdb.python/py-explore-cc.exp: explore_base_class_A
PASS: gdb.python/py-explore-cc.exp: return_to_B
PASS: gdb.python/py-explore-cc.exp: explore_field_i_of_B
PASS: gdb.python/py-explore-cc.exp: return_to_B_from_i
PASS: gdb.python/py-explore-cc.exp: explore_field_c_of_B
PASS: gdb.python/py-explore-cc.exp: return_to_B_from_c
PASS: gdb.python/py-explore-cc.exp: return_to_gdb_prompt_from_B
Running ../../../W._C._Handy/gdb/testsuite/gdb.python/py-explore.exp ...
PASS: gdb.python/py-explore.exp: continue to breakpoint: Break here
PASS: gdb.python/py-explore.exp: explore i
PASS: gdb.python/py-explore.exp: explore ss
PASS: gdb.python/py-explore.exp: explore *ss_ptr
PASS: gdb.python/py-explore.exp: explore ss_t
PASS: gdb.python/py-explore.exp: explore ss_ptr
PASS: gdb.python/py-explore.exp: explore ss_ptr as single value pointer
PASS: gdb.python/py-explore.exp: explore darray_ref
PASS: gdb.python/py-explore.exp: no_to_explore_as_pointer
PASS: gdb.python/py-explore.exp: explore_as_array
PASS: gdb.python/py-explore.exp: explore_as_array_index_2
PASS: gdb.python/py-explore.exp: end explore_as_array_index_2
PASS: gdb.python/py-explore.exp: end explore_as_array
PASS: gdb.python/py-explore.exp: explore su
PASS: gdb.python/py-explore.exp: explore su.d
PASS: gdb.python/py-explore.exp: end su.d exploration
PASS: gdb.python/py-explore.exp: end su exploration
PASS: gdb.python/py-explore.exp: explore cs
PASS: gdb.python/py-explore.exp: explore cs.s
PASS: gdb.python/py-explore.exp: end cs.s exploration
PASS: gdb.python/py-explore.exp: explore cs.u
PASS: gdb.python/py-explore.exp: end cs.u exploration
PASS: gdb.python/py-explore.exp: end cs exploration
PASS: gdb.python/py-explore.exp: explore cu
PASS: gdb.python/py-explore.exp: explore cu.sa
PASS: gdb.python/py-explore.exp: explore cu.sa[0]
PASS: gdb.python/py-explore.exp: end cu.sa[0] exploration
PASS: gdb.python/py-explore.exp: end cu.sa exploration
PASS: gdb.python/py-explore.exp: end cu exploration
PASS: gdb.python/py-explore.exp: explore int
PASS: gdb.python/py-explore.exp: explore struct SimpleStruct
PASS: gdb.python/py-explore.exp: explore type struct SimpleStruct feild 0
PASS: gdb.python/py-explore.exp: return to struct SimpleStruct from field 0
PASS: gdb.python/py-explore.exp: explore type struct SimpleStruct feild 1
PASS: gdb.python/py-explore.exp: return to struct SimpleStruct from field 1
PASS: gdb.python/py-explore.exp: return to GDB prompt from struct SimpleStruct
PASS: gdb.python/py-explore.exp: explore union SimpleUnion
PASS: gdb.python/py-explore.exp: explore type union SimpleUnion feild 0
PASS: gdb.python/py-explore.exp: return to union SimpleUnion from field 0
PASS: gdb.python/py-explore.exp: explore type union SimpleUnion feild 1
PASS: gdb.python/py-explore.exp: return to union SimpleUnion from field 1
PASS: gdb.python/py-explore.exp: explore type union SimpleUnion feild 2
PASS: gdb.python/py-explore.exp: return to union SimpleUnion from field 2
PASS: gdb.python/py-explore.exp: explore type union SimpleUnion feild 3
PASS: gdb.python/py-explore.exp: return to union SimpleUnion from field 3
PASS: gdb.python/py-explore.exp: return to GDB prompt from union SimpleUnion
PASS: gdb.python/py-explore.exp: explore SS
PASS: gdb.python/py-explore.exp: explore type SS feild 0
PASS: gdb.python/py-explore.exp: return to SS from field 0
PASS: gdb.python/py-explore.exp: explore type SS feild 1
PASS: gdb.python/py-explore.exp: return to SS field 1
PASS: gdb.python/py-explore.exp: return to GDB prompt from SS
PASS: gdb.python/py-explore.exp: explore type struct ComplexStruct
PASS: gdb.python/py-explore.exp: explore type struct ComplexStruct field 0
PASS: gdb.python/py-explore.exp: return to ComplexStruct from field 0
PASS: gdb.python/py-explore.exp: explore type struct ComplexStruct field 1
PASS: gdb.python/py-explore.exp: return to ComplexStruct from field 1
PASS: gdb.python/py-explore.exp: explore type struct ComplexStruct field 2
PASS: gdb.python/py-explore.exp: return to ComplexStruct from field 2
PASS: gdb.python/py-explore.exp: return to GDB prompt from ComplexStruct type exploration
PASS: gdb.python/py-explore.exp: explore type union ComplexUnion
PASS: gdb.python/py-explore.exp: explore type union ComplexUnion field 0
PASS: gdb.python/py-explore.exp: return to ComplexUnion from field 0
PASS: gdb.python/py-explore.exp: explore type union ComplexUnion field 1
PASS: gdb.python/py-explore.exp: return to ComplexUnion from field 1
PASS: gdb.python/py-explore.exp: return to GDB prompt from ComplexUnion type exploration
PASS: gdb.python/py-explore.exp: explore type union ComplexUnion
PASS: gdb.python/py-explore.exp: explore type union ComplexUnion field 0
PASS: gdb.python/py-explore.exp: return to ComplexUnion from field 0
PASS: gdb.python/py-explore.exp: explore type union ComplexUnion field 1
PASS: gdb.python/py-explore.exp: return to ComplexUnion from field 1
PASS: gdb.python/py-explore.exp: return to GDB prompt from ComplexUnion type exploration
Running ../../../W._C._Handy/gdb/testsuite/gdb.python/py-finish-breakpoint.exp ...
PASS: gdb.python/py-finish-breakpoint.exp: disable confirmation
PASS: gdb.python/py-finish-breakpoint.exp: import python scripts
PASS: gdb.python/py-finish-breakpoint.exp: continue to the function to finish
PASS: gdb.python/py-finish-breakpoint.exp: set FinishBreakpoint with default frame value
PASS: gdb.python/py-finish-breakpoint.exp: set FinishBreakpoint
PASS: gdb.python/py-finish-breakpoint.exp: check return_value at init
PASS: gdb.python/py-finish-breakpoint.exp: check MyFinishBreakpoint hit
PASS: gdb.python/py-finish-breakpoint.exp: check return_value
PASS: gdb.python/py-finish-breakpoint.exp: check finishBP on default frame has been hit
PASS: gdb.python/py-finish-breakpoint.exp: ensure that finish bp is invalid afer normal hit
PASS: gdb.python/py-finish-breakpoint.exp: return to main()
PASS: gdb.python/py-finish-breakpoint.exp: check FinishBP not allowed in main
PASS: gdb.python/py-finish-breakpoint.exp: import python scripts
PASS: gdb.python/py-finish-breakpoint.exp: ensure that shared lib has no debug info
PASS: gdb.python/py-finish-breakpoint.exp: continue to do_nothing
PASS: gdb.python/py-finish-breakpoint.exp: set finish breakpoint
PASS: gdb.python/py-finish-breakpoint.exp: check FinishBreakpoint hit
PASS: gdb.python/py-finish-breakpoint.exp: check return value without debug symbol
PASS: gdb.python/py-finish-breakpoint.exp: import python scripts
PASS: gdb.python/py-finish-breakpoint.exp: set finish breakpoint
PASS: gdb.python/py-finish-breakpoint.exp: set BP after the jump
PASS: gdb.python/py-finish-breakpoint.exp: check FinishBP out of scope notification
PASS: gdb.python/py-finish-breakpoint.exp: ensure that finish bp is invalid afer out of scope notification
PASS: gdb.python/py-finish-breakpoint.exp: import python scripts
PASS: gdb.python/py-finish-breakpoint.exp: set a conditional BP
PASS: gdb.python/py-finish-breakpoint.exp: set FinishBP in a breakpoint condition
PASS: gdb.python/py-finish-breakpoint.exp: don't allow FinishBreakpoint on dummy frames
PASS: gdb.python/py-finish-breakpoint.exp: check stopped location
PASS: gdb.python/py-finish-breakpoint.exp: import python scripts
PASS: gdb.python/py-finish-breakpoint.exp: set conditional BP
PASS: gdb.python/py-finish-breakpoint.exp: set BP in condition
PASS: gdb.python/py-finish-breakpoint.exp: stop in condition function
PASS: gdb.python/py-finish-breakpoint.exp: finish condition evaluation
PASS: gdb.python/py-finish-breakpoint.exp: stop at conditional breakpoint
PASS: gdb.python/py-finish-breakpoint.exp: check stopped location
PASS: gdb.python/py-finish-breakpoint.exp: import python scripts
PASS: gdb.python/py-finish-breakpoint.exp: prepare TestExplicitBreakpoint
PASS: gdb.python/py-finish-breakpoint.exp: don't allow FinishBreakpoint on dummy frames
PASS: gdb.python/py-finish-breakpoint.exp: prepare TestExplicitBreakpoint
PASS: gdb.python/py-finish-breakpoint.exp: FinishBP stop at during explicit function call
PASS: gdb.python/py-finish-breakpoint.exp: switch to exit() test
PASS: gdb.python/py-finish-breakpoint.exp: set FinishBP after the exit()
PASS: gdb.python/py-finish-breakpoint.exp: catch out of scope after exit
PASS: gdb.python/py-finish-breakpoint.exp: set FinishBP after the exec
PASS: gdb.python/py-finish-breakpoint.exp: catch exec
PASS: gdb.python/py-finish-breakpoint.exp: catch out of scope after exec
Running ../../../W._C._Handy/gdb/testsuite/gdb.python/py-finish-breakpoint2.exp ...
PASS: gdb.python/py-finish-breakpoint2.exp: import python scripts
PASS: gdb.python/py-finish-breakpoint2.exp: run to exception 1
PASS: gdb.python/py-finish-breakpoint2.exp: check BP count
PASS: gdb.python/py-finish-breakpoint2.exp: set FinishBP after the exception
PASS: gdb.python/py-finish-breakpoint2.exp: check FinishBreakpoint in catch()
PASS: gdb.python/py-finish-breakpoint2.exp: check finish BP removal
PASS: gdb.python/py-finish-breakpoint2.exp: continue to second exception
PASS: gdb.python/py-finish-breakpoint2.exp: set FinishBP after the exception
PASS: gdb.python/py-finish-breakpoint2.exp: FinishBreakpoint with exception thrown not caught
Running ../../../W._C._Handy/gdb/testsuite/gdb.python/py-frame-args.exp ...
PASS: gdb.python/py-frame-args.exp: python exec (open ('py-frame-args.py').read ())
PASS: gdb.python/py-frame-args.exp: continue to breakpoint: break-here
PASS: gdb.python/py-frame-args.exp: set print raw frame-arguments off
PASS: gdb.python/py-frame-args.exp: set print frame-arguments none
PASS: gdb.python/py-frame-args.exp: frame pretty,none
PASS: gdb.python/py-frame-args.exp: set print frame-arguments scalars
PASS: gdb.python/py-frame-args.exp: frame pretty,scalars
PASS: gdb.python/py-frame-args.exp: set print frame-arguments all
PASS: gdb.python/py-frame-args.exp: frame pretty,all
PASS: gdb.python/py-frame-args.exp: set print raw frame-arguments on
PASS: gdb.python/py-frame-args.exp: set print frame-arguments none
PASS: gdb.python/py-frame-args.exp: frame raw,none
PASS: gdb.python/py-frame-args.exp: set print frame-arguments scalars
PASS: gdb.python/py-frame-args.exp: frame raw,scalars
PASS: gdb.python/py-frame-args.exp: set print frame-arguments all
PASS: gdb.python/py-frame-args.exp: frame raw,all
Running ../../../W._C._Handy/gdb/testsuite/gdb.python/py-frame-inline.exp ...
PASS: gdb.python/py-frame-inline.exp: continue to breakpoint: Block break here.
PASS: gdb.python/py-frame-inline.exp: info frame
PASS: gdb.python/py-frame-inline.exp: up
PASS: gdb.python/py-frame-inline.exp: python print (gdb.selected_frame().read_var('l'))
Running ../../../W._C._Handy/gdb/testsuite/gdb.python/py-frame.exp ...
PASS: gdb.python/py-frame.exp: continue to breakpoint: Block break here.
PASS: gdb.python/py-frame.exp: test Frame.architecture()
PASS: gdb.python/py-frame.exp: test i
PASS: gdb.python/py-frame.exp: test f
PASS: gdb.python/py-frame.exp: test b
PASS: gdb.python/py-frame.exp: test i = 1.1
PASS: gdb.python/py-frame.exp: test double i
PASS: gdb.python/py-frame.exp: test f = 2.2
PASS: gdb.python/py-frame.exp: test double f
PASS: gdb.python/py-frame.exp: test i = 99
PASS: gdb.python/py-frame.exp: test int i
PASS: gdb.python/py-frame.exp: continue to breakpoint: breakpoint at f2
PASS: gdb.python/py-frame.exp: selected frame -vs- newest frame
PASS: gdb.python/py-frame.exp: newest frame -vs- newest frame
PASS: gdb.python/py-frame.exp: test equality comparison (false)
PASS: gdb.python/py-frame.exp: test equality comparison (true)
PASS: gdb.python/py-frame.exp: test inequality comparison (true)
PASS: gdb.python/py-frame.exp: test inequality comparison (false)
PASS: gdb.python/py-frame.exp: test Frame.is_valid
PASS: gdb.python/py-frame.exp: test Frame.name
PASS: gdb.python/py-frame.exp: test Frame.type
PASS: gdb.python/py-frame.exp: test Frame.type
PASS: gdb.python/py-frame.exp: test gdb.frame_stop_reason_string
PASS: gdb.python/py-frame.exp: test Frame.pc
PASS: gdb.python/py-frame.exp: test Frame.older
PASS: gdb.python/py-frame.exp: test Frame.newer
PASS: gdb.python/py-frame.exp: test Frame.read_var - error
PASS: gdb.python/py-frame.exp: test Frame.read_var - success
PASS: gdb.python/py-frame.exp: test gdb.selected_frame
Running ../../../W._C._Handy/gdb/testsuite/gdb.python/py-framefilter-mi.exp ...
PASS: gdb.python/py-framefilter-mi.exp: breakpoint at main
PASS: gdb.python/py-framefilter-mi.exp: mi runto main
PASS: gdb.python/py-framefilter-mi.exp: Load python file
PASS: gdb.python/py-framefilter-mi.exp: run to 46 (set breakpoint)
PASS: gdb.python/py-framefilter-mi.exp: stack-list-locals --all-values
PASS: gdb.python/py-framefilter-mi.exp: enable frame filters
PASS: gdb.python/py-framefilter-mi.exp: stack-list-locals --all-values frame filters enabled
PASS: gdb.python/py-framefilter-mi.exp: run to 51 (set breakpoint)
PASS: gdb.python/py-framefilter-mi.exp: filtered stack listing
PASS: gdb.python/py-framefilter-mi.exp: filtered stack list 0 3
PASS: gdb.python/py-framefilter-mi.exp: filtered stack list 22 24
PASS: gdb.python/py-framefilter-mi.exp: stack-list-arguments 0
PASS: gdb.python/py-framefilter-mi.exp: stack-list-arguments --no-frame-filters 0
PASS: gdb.python/py-framefilter-mi.exp: stack-list-arguments 0 0 3
PASS: gdb.python/py-framefilter-mi.exp: stack-list-arguments 0 22 27
PASS: gdb.python/py-framefilter-mi.exp: stack-list-arguments 1
PASS: gdb.python/py-framefilter-mi.exp: stack-list-arguments --no-frame-filters 1
PASS: gdb.python/py-framefilter-mi.exp: stack-list-arguments 1 0 3
PASS: gdb.python/py-framefilter-mi.exp: stack-list-arguments 1 22 27
PASS: gdb.python/py-framefilter-mi.exp: stack-list-arguments 2
PASS: gdb.python/py-framefilter-mi.exp: stack-list-arguments --no-frame-filters 2
PASS: gdb.python/py-framefilter-mi.exp: stack-list-arguments 2 0 3
PASS: gdb.python/py-framefilter-mi.exp: stack-list-arguments 2 22 27
PASS: gdb.python/py-framefilter-mi.exp: stack-list-arguments --no-frame-filters 2 22 27
PASS: gdb.python/py-framefilter-mi.exp: stack-list-locals --no-frame-filters 0
PASS: gdb.python/py-framefilter-mi.exp: stack-list-locals --no-frame-filters 1
PASS: gdb.python/py-framefilter-mi.exp: stack-list-locals --no-frame-filters 2
PASS: gdb.python/py-framefilter-mi.exp: stack-list-locals --no-frame-filters --no-values
PASS: gdb.python/py-framefilter-mi.exp: stack-list-locals --no-frame-filters --all-values
PASS: gdb.python/py-framefilter-mi.exp: stack-list-locals --no-frame-filters --simple-values
PASS: gdb.python/py-framefilter-mi.exp: stack-list-locals 0
PASS: gdb.python/py-framefilter-mi.exp: stack-list-locals 1
PASS: gdb.python/py-framefilter-mi.exp: stack-list-locals 2
PASS: gdb.python/py-framefilter-mi.exp: stack-list-variables --no-frame-filters 0
PASS: gdb.python/py-framefilter-mi.exp: stack-list-variables 0
Running ../../../W._C._Handy/gdb/testsuite/gdb.python/py-framefilter.exp ...
PASS: gdb.python/py-framefilter.exp: set auto-load safe-path
PASS: gdb.python/py-framefilter.exp: Test auto-load had loaded python scripts
PASS: gdb.python/py-framefilter.exp: Set python print-stack to full
PASS: gdb.python/py-framefilter.exp: Load python file
PASS: gdb.python/py-framefilter.exp: continue to breakpoint: Inner test breakpoint
PASS: gdb.python/py-framefilter.exp: bt full no-filters
PASS: gdb.python/py-framefilter.exp: bt full with filters
PASS: gdb.python/py-framefilter.exp: continue to breakpoint: Backtrace end breakpoint
PASS: gdb.python/py-framefilter.exp: info frame filter before setting priority
PASS: gdb.python/py-framefilter.exp: show frame-filter priority global Elider before setting
PASS: gdb.python/py-framefilter.exp: set frame-filter priotiy global Elider 1000
PASS: gdb.python/py-framefilter.exp: show frame-filter priority global Elider after setting
PASS: gdb.python/py-framefilter.exp: info frame filter after setting priority
PASS: gdb.python/py-framefilter.exp: info frame filter before disable frame filter
PASS: gdb.python/py-framefilter.exp: disable frame-filter global Elider
PASS: gdb.python/py-framefilter.exp: info frame filter after disable frame filter
PASS: gdb.python/py-framefilter.exp: enable frame-filter global Elider
PASS: gdb.python/py-framefilter.exp: info frame filter after reenabling frame filter
PASS: gdb.python/py-framefilter.exp: bt no-filters
PASS: gdb.python/py-framefilter.exp: bt with frame filters
PASS: gdb.python/py-framefilter.exp: disable frame-filter global Reverse
PASS: gdb.python/py-framefilter.exp: bt with frame-filter Reverse disabled
PASS: gdb.python/py-framefilter.exp: bt -2 with frame-filter Reverse disabled
PASS: gdb.python/py-framefilter.exp: bt 3 with frame-filter Reverse disabled
PASS: gdb.python/py-framefilter.exp: bt no-filters full with Reverse disabled
PASS: gdb.python/py-framefilter.exp: bt full with Reverse disabled
PASS: gdb.python/py-framefilter.exp: turn off frame arguments
PASS: gdb.python/py-framefilter.exp: bt no-filter 1 no args
PASS: gdb.python/py-framefilter.exp: bt 1 no args
PASS: gdb.python/py-framefilter.exp: turn frame arguments to scalars only
PASS: gdb.python/py-framefilter.exp: bt no-filter 1 scalars
PASS: gdb.python/py-framefilter.exp: bt 1 scalars
PASS: gdb.python/py-framefilter.exp: turn on frame arguments
PASS: gdb.python/py-framefilter.exp: bt no-filter 1 all args
PASS: gdb.python/py-framefilter.exp: bt 1 all args
PASS: gdb.python/py-framefilter.exp: Turn off address printing
PASS: gdb.python/py-framefilter.exp: bt no-filter 1 no address
PASS: gdb.python/py-framefilter.exp: bt 1 no addresss
PASS: gdb.python/py-framefilter.exp: set auto-load safe-path for no debug info
PASS: gdb.python/py-framefilter.exp: Set autoload path for no debug info tests
PASS: gdb.python/py-framefilter.exp: set python print-stack full for no debuginfo tests
PASS: gdb.python/py-framefilter.exp: Load python file for no debuginfo tests
PASS: gdb.python/py-framefilter.exp: disable frame-filter gloval Reverse for no debuginfo
PASS: gdb.python/py-framefilter.exp: bt for no debuginfo
PASS: gdb.python/py-framefilter.exp: bt full for no debuginfo
PASS: gdb.python/py-framefilter.exp: bt no filters for no debuginfo
PASS: gdb.python/py-framefilter.exp: bt no-filters full no debuginfo
Running ../../../W._C._Handy/gdb/testsuite/gdb.python/py-function.exp ...
PASS: gdb.python/py-function.exp: input convenience function - python
PASS: gdb.python/py-function.exp: input convenience function - class test_func (gdb.Function):
PASS: gdb.python/py-function.exp: input convenience function -   def __init__ (self):
PASS: gdb.python/py-function.exp: input convenience function -     super (test_func, self).__init__ ("test_func")
PASS: gdb.python/py-function.exp: input convenience function -   def invoke (self, arg):
PASS: gdb.python/py-function.exp: input convenience function -     return "test_func output, arg = %s" % arg.string ()
PASS: gdb.python/py-function.exp: input convenience function - test_func ()
PASS: gdb.python/py-function.exp: input convenience function - end
PASS: gdb.python/py-function.exp: call function
PASS: gdb.python/py-function.exp: input value-returning convenience function - python
PASS: gdb.python/py-function.exp: input value-returning convenience function - class Double (gdb.Function):
PASS: gdb.python/py-function.exp: input value-returning convenience function -   def __init__ (self):
PASS: gdb.python/py-function.exp: input value-returning convenience function -     super (Double, self).__init__ ("double")
PASS: gdb.python/py-function.exp: input value-returning convenience function -   def invoke (self, n):
PASS: gdb.python/py-function.exp: input value-returning convenience function -     return n*2
PASS: gdb.python/py-function.exp: input value-returning convenience function - Double ()
PASS: gdb.python/py-function.exp: input value-returning convenience function - end
PASS: gdb.python/py-function.exp: call value-returning function
PASS: gdb.python/py-function.exp: input int-returning function - python
PASS: gdb.python/py-function.exp: input int-returning function - class Yes(gdb.Function):
PASS: gdb.python/py-function.exp: input int-returning function -     def __init__(self):
PASS: gdb.python/py-function.exp: input int-returning function -         gdb.Function.__init__(self, 'yes')
PASS: gdb.python/py-function.exp: input int-returning function -     def invoke(self):
PASS: gdb.python/py-function.exp: input int-returning function -         return 1
PASS: gdb.python/py-function.exp: input int-returning function - Yes ()
PASS: gdb.python/py-function.exp: input int-returning function - end
PASS: gdb.python/py-function.exp: call yes with &&
PASS: gdb.python/py-function.exp: call yes with ||
PASS: gdb.python/py-function.exp: Test GDBError - python
PASS: gdb.python/py-function.exp: Test GDBError - class GDBError(gdb.Function):
PASS: gdb.python/py-function.exp: Test GDBError -     def __init__(self):
PASS: gdb.python/py-function.exp: Test GDBError -         gdb.Function.__init__(self, 'gdberror')
PASS: gdb.python/py-function.exp: Test GDBError -     def invoke(self):
PASS: gdb.python/py-function.exp: Test GDBError -         raise gdb.GdbError("This is a GdbError")
PASS: gdb.python/py-function.exp: Test GDBError - GDBError ()
PASS: gdb.python/py-function.exp: Test GDBError - end
PASS: gdb.python/py-function.exp: Test GdbError.  There should not be a stack trace
PASS: gdb.python/py-function.exp: Test Normal Error - python
PASS: gdb.python/py-function.exp: Test Normal Error - class NormalError(gdb.Function):
PASS: gdb.python/py-function.exp: Test Normal Error -     def __init__(self):
PASS: gdb.python/py-function.exp: Test Normal Error -         gdb.Function.__init__(self, 'normalerror')
PASS: gdb.python/py-function.exp: Test Normal Error -     def invoke(self):
PASS: gdb.python/py-function.exp: Test Normal Error -         raise RuntimeError("This is a Normal Error")
PASS: gdb.python/py-function.exp: Test Normal Error - NormalError ()
PASS: gdb.python/py-function.exp: Test Normal Error - end
PASS: gdb.python/py-function.exp: set python print-stack full
PASS: gdb.python/py-function.exp: Test a Runtime error.  There should be a stack trace.
PASS: gdb.python/py-function.exp: input command-calling function - python
PASS: gdb.python/py-function.exp: input command-calling function - class CallCommand(gdb.Function):
PASS: gdb.python/py-function.exp: input command-calling function -     def __init__(self):
PASS: gdb.python/py-function.exp: input command-calling function -         gdb.Function.__init__(self, 'call_command')
PASS: gdb.python/py-function.exp: input command-calling function -     def invoke(self):
PASS: gdb.python/py-function.exp: input command-calling function -         return gdb.execute('print 1', to_string=True)
PASS: gdb.python/py-function.exp: input command-calling function - CallCommand ()
PASS: gdb.python/py-function.exp: input command-calling function - end
PASS: gdb.python/py-function.exp: Setting a value from a function which executes a command.
PASS: gdb.python/py-function.exp: Setting a value from a function which executes a command, again.
Running ../../../W._C._Handy/gdb/testsuite/gdb.python/py-inferior.exp ...
PASS: gdb.python/py-inferior.exp: successfully compiled posix threads test case
PASS: gdb.python/py-inferior.exp: get inferiors list
PASS: gdb.python/py-inferior.exp: verify inferiors list
PASS: gdb.python/py-inferior.exp: test equality comparison (true)
PASS: gdb.python/py-inferior.exp: test Inferior.num
PASS: gdb.python/py-inferior.exp: test Inferior.pid
PASS: gdb.python/py-inferior.exp: test Inferior.was_attached
PASS: gdb.python/py-inferior.exp: test Inferior.threads
PASS: gdb.python/py-inferior.exp: continue to breakpoint: cont to check_threads
PASS: gdb.python/py-inferior.exp: test Inferior.threads 2
PASS: gdb.python/py-inferior.exp: continue to breakpoint: cont to Break here.
PASS: gdb.python/py-inferior.exp: read str contents
PASS: gdb.python/py-inferior.exp: write str
PASS: gdb.python/py-inferior.exp: ensure str was changed in the inferior
PASS: gdb.python/py-inferior.exp: py start_addr = search_buf.address
PASS: gdb.python/py-inferior.exp: py length = search_buf.type.sizeof
PASS: gdb.python/py-inferior.exp: find string pattern
PASS: gdb.python/py-inferior.exp: pattern not found at end of range
PASS: gdb.python/py-inferior.exp: pattern found at end of range
PASS: gdb.python/py-inferior.exp: py from struct import *
PASS: gdb.python/py-inferior.exp: set int16_search_buf[10] = 0x1234
PASS: gdb.python/py-inferior.exp: py search_buf = gdb.selected_frame ().read_var ('int16_search_buf')
PASS: gdb.python/py-inferior.exp: py start_addr = search_buf.address
PASS: gdb.python/py-inferior.exp: py length = search_buf.type.sizeof
PASS: gdb.python/py-inferior.exp: py pattern = pack('<H',0x1234)
PASS: gdb.python/py-inferior.exp: find 16-bit pattern, with value pattern
PASS: gdb.python/py-inferior.exp: set int32_search_buf[10] = 0x12345678
PASS: gdb.python/py-inferior.exp: py search_buf = gdb.selected_frame ().read_var ('int32_search_buf')
PASS: gdb.python/py-inferior.exp: py start_addr = search_buf.address
PASS: gdb.python/py-inferior.exp: py length = search_buf.type.sizeof
PASS: gdb.python/py-inferior.exp: py pattern = pack('<I',0x12345678)
PASS: gdb.python/py-inferior.exp: find 32-bit pattern, with python pattern
PASS: gdb.python/py-inferior.exp: set int64_search_buf[10] = 0xfedcba9876543210LL
PASS: gdb.python/py-inferior.exp: py search_buf = gdb.selected_frame ().read_var ('int64_search_buf')
PASS: gdb.python/py-inferior.exp: py start_addr = search_buf.address
PASS: gdb.python/py-inferior.exp: py length = search_buf.type.sizeof
PASS: gdb.python/py-inferior.exp: py pattern = pack('<Q', 0xfedcba9876543210)
PASS: gdb.python/py-inferior.exp: find 64-bit pattern, with value pattern
PASS: gdb.python/py-inferior.exp: set *(int8_t*) &search_buf[10] = 0x62
PASS: gdb.python/py-inferior.exp: set *(int16_t*) &search_buf[11] = 0x6363
PASS: gdb.python/py-inferior.exp: set *(int32_t*) &search_buf[13] = 0x64646464
PASS: gdb.python/py-inferior.exp: py search_buf = gdb.selected_frame ().read_var ('search_buf')
PASS: gdb.python/py-inferior.exp: py start_addr = search_buf[0].address
PASS: gdb.python/py-inferior.exp: py pattern1 = pack('B', 0x62)
PASS: gdb.python/py-inferior.exp: py pattern2 = pack('<H', 0x6363)
PASS: gdb.python/py-inferior.exp: py pattern3 = pack('<I', 0x64646464)
PASS: gdb.python/py-inferior.exp: find mixed-sized pattern
PASS: gdb.python/py-inferior.exp: find mixed-sized pattern
PASS: gdb.python/py-inferior.exp: find mixed-sized pattern
PASS: gdb.python/py-inferior.exp: set *(int32_t*) &search_buf[0*16000+100] = 0x12345678
PASS: gdb.python/py-inferior.exp: set *(int32_t*) &search_buf[1*16000+100] = 0x12345678
PASS: gdb.python/py-inferior.exp: py start_addr = gdb.selected_frame ().read_var ('search_buf')
PASS: gdb.python/py-inferior.exp: py end_addr = start_addr + gdb.selected_frame ().read_var ('search_buf_size')
PASS: gdb.python/py-inferior.exp: py pattern = pack('<I', 0x12345678)
PASS: gdb.python/py-inferior.exp: py first = gdb.inferiors()[0].search_memory (start_addr,end_addr - start_addr, pattern)
PASS: gdb.python/py-inferior.exp: search spanning large range 1st result
PASS: gdb.python/py-inferior.exp: py start_addr = first + 1
PASS: gdb.python/py-inferior.exp: py second = gdb.inferiors()[0].search_memory (start_addr, end_addr - start_addr, pattern)
PASS: gdb.python/py-inferior.exp: search spanning large range 2nd result
PASS: gdb.python/py-inferior.exp: py start_addr = second + 1
PASS: gdb.python/py-inferior.exp: py third = gdb.inferiors()[0].search_memory (start_addr, end_addr - start_addr, pattern)
PASS: gdb.python/py-inferior.exp: search spanning large range 3rd result
PASS: gdb.python/py-inferior.exp: set *(int32_t*) &search_buf[16000-1] = 0xfdb97531
PASS: gdb.python/py-inferior.exp: py pattern = pack('<I', 0xfdb97531)
PASS: gdb.python/py-inferior.exp: py start_addr = gdb.selected_frame ().read_var ('search_buf')
PASS: gdb.python/py-inferior.exp: find pattern straddling chunk boundary
PASS: gdb.python/py-inferior.exp: get initial list
PASS: gdb.python/py-inferior.exp: Get inferior list length
PASS: gdb.python/py-inferior.exp: Check inferior validity
PASS: gdb.python/py-inferior.exp: add empty inferior 2
PASS: gdb.python/py-inferior.exp: get new list
PASS: gdb.python/py-inferior.exp: Get inferior list length
PASS: gdb.python/py-inferior.exp: Check inferior validity
PASS: gdb.python/py-inferior.exp: Check inferior validity
PASS: gdb.python/py-inferior.exp: remove-inferiors 3
PASS: gdb.python/py-inferior.exp: Check inferior validity
PASS: gdb.python/py-inferior.exp: Check inferior validity
PASS: gdb.python/py-inferior.exp: Switch to first inferior
PASS: gdb.python/py-inferior.exp: First inferior selected
PASS: gdb.python/py-inferior.exp: Create new inferior
PASS: gdb.python/py-inferior.exp: Switch to third inferior
PASS: gdb.python/py-inferior.exp: Third inferior selected
PASS: gdb.python/py-inferior.exp: Switch to first inferior
PASS: gdb.python/py-inferior.exp: Remove second inferior
Running ../../../W._C._Handy/gdb/testsuite/gdb.python/py-infthread.exp ...
PASS: gdb.python/py-infthread.exp: test gdb.selected_thread
PASS: gdb.python/py-infthread.exp: verify InferiorThread object
PASS: gdb.python/py-infthread.exp: test Inferior.num
PASS: gdb.python/py-infthread.exp: test InferiorThread.ptid
PASS: gdb.python/py-infthread.exp: get supplied name of current thread
PASS: gdb.python/py-infthread.exp: set name of current thread
PASS: gdb.python/py-infthread.exp: check name of current thread
PASS: gdb.python/py-infthread.exp: reset name of current thread
PASS: gdb.python/py-infthread.exp: check name of current thread again
PASS: gdb.python/py-infthread.exp: test InferiorThread.is_stopped
PASS: gdb.python/py-infthread.exp: test InferiorThread.is_running
PASS: gdb.python/py-infthread.exp: test InferiorThread.is_exited
PASS: gdb.python/py-infthread.exp: test InferiorThread.is_valid
PASS: gdb.python/py-infthread.exp: kill inferior 1
PASS: gdb.python/py-infthread.exp: test InferiorThread.is_valid
Running ../../../W._C._Handy/gdb/testsuite/gdb.python/py-mi.exp ...
PASS: gdb.python/py-mi.exp: breakpoint at main
PASS: gdb.python/py-mi.exp: mi runto main
PASS: gdb.python/py-mi.exp: run to 328 (set breakpoint)
PASS: gdb.python/py-mi.exp: create container varobj, no pretty-printing
PASS: gdb.python/py-mi.exp: examine container children=0, no pretty-printing
PASS: gdb.python/py-mi.exp: delete varobj
PASS: gdb.python/py-mi.exp: create nscont varobj, no pretty-printing
PASS: gdb.python/py-mi.exp: examine nscont children=0, no pretty-printing
PASS: gdb.python/py-mi.exp: delete varobj
PASS: gdb.python/py-mi.exp: create string_1 varobj
PASS: gdb.python/py-mi.exp: create estring varobj
PASS: gdb.python/py-mi.exp: assign string_1 from string_2
PASS: gdb.python/py-mi.exp: update string varobj after assignment
PASS: gdb.python/py-mi.exp: create container varobj
PASS: gdb.python/py-mi.exp: examine container children=0
PASS: gdb.python/py-mi.exp: next over update 1
PASS: gdb.python/py-mi.exp: varobj update 1
PASS: gdb.python/py-mi.exp: next over update 2
PASS: gdb.python/py-mi.exp: varobj update 2
PASS: gdb.python/py-mi.exp: clear visualizer
PASS: gdb.python/py-mi.exp: varobj update after clearing
PASS: gdb.python/py-mi.exp: choose default visualizer
PASS: gdb.python/py-mi.exp: varobj update after choosing default
PASS: gdb.python/py-mi.exp: choose visualizer using expression
PASS: gdb.python/py-mi.exp: varobj update after choosing via expression
PASS: gdb.python/py-mi.exp: list varobj children after selecting child range
PASS: gdb.python/py-mi.exp: list varobj children after resetting child range
PASS: gdb.python/py-mi.exp: next over update 3
PASS: gdb.python/py-mi.exp: set update range
PASS: gdb.python/py-mi.exp: list children after setting update range
PASS: gdb.python/py-mi.exp: list selected children after setting range
PASS: gdb.python/py-mi.exp: list children after listing selected range
PASS: gdb.python/py-mi.exp: next over update 4
PASS: gdb.python/py-mi.exp: update after next with restricted range
PASS: gdb.python/py-mi.exp: set update range with non-zero start
PASS: gdb.python/py-mi.exp: update varobj with change outside selected range
PASS: gdb.python/py-mi.exp: next over update 5
PASS: gdb.python/py-mi.exp: create second container varobj
PASS: gdb.python/py-mi.exp: update varobj, no children requested
PASS: gdb.python/py-mi.exp: next over update 6
PASS: gdb.python/py-mi.exp: update varobj 2, no children requested
PASS: gdb.python/py-mi.exp: run to 131 (set breakpoint)
PASS: gdb.python/py-mi.exp: create outer varobj
PASS: gdb.python/py-mi.exp: list children of outer
PASS: gdb.python/py-mi.exp: list children of outer.s
PASS: gdb.python/py-mi.exp: next over outer update
PASS: gdb.python/py-mi.exp: update after updating element of outer
PASS: gdb.python/py-mi.exp: run to 222 (set breakpoint)
PASS: gdb.python/py-mi.exp: update after type change
PASS: gdb.python/py-mi.exp: run to 351 (set breakpoint)
PASS: gdb.python/py-mi.exp: create nstype varobj
PASS: gdb.python/py-mi.exp: list children after setting update range
PASS: gdb.python/py-mi.exp: clear visualizer
PASS: gdb.python/py-mi.exp: varobj update after clearing
PASS: gdb.python/py-mi.exp: choose default visualizer
PASS: gdb.python/py-mi.exp: create nstype2 varobj
PASS: gdb.python/py-mi.exp: list children after setting exception flag
PASS: gdb.python/py-mi.exp: create me varobj
PASS: gdb.python/py-mi.exp: evaluate me varobj
PASS: gdb.python/py-mi.exp: printer whose children are returned as a list
PASS: gdb.python/py-mi.exp: run to 254 (set breakpoint)
PASS: gdb.python/py-mi.exp: create varobj for c
PASS: gdb.python/py-mi.exp: choose array visualizer for c
PASS: gdb.python/py-mi.exp: list children of c
PASS: gdb.python/py-mi.exp: next over change of array element
PASS: gdb.python/py-mi.exp: update varobj after element change
PASS: gdb.python/py-mi.exp: breakpoint at main
PASS: gdb.python/py-mi.exp: mi runto main
PASS: gdb.python/py-mi.exp: run to 351 (set breakpoint)
PASS: gdb.python/py-mi.exp: create fake varobj
PASS: gdb.python/py-mi.exp: list children of fake
PASS: gdb.python/py-mi.exp: list children fake.private
PASS: gdb.python/py-mi.exp: Install visualizer on a cplus_fake_child
Running ../../../W._C._Handy/gdb/testsuite/gdb.python/py-objfile-script.exp ...
PASS: gdb.python/py-objfile-script.exp: set auto-load safe-path
PASS: gdb.python/py-objfile-script.exp: info auto-load python-scripts
PASS: gdb.python/py-objfile-script.exp: b 38
PASS: gdb.python/py-objfile-script.exp: continue
PASS: gdb.python/py-objfile-script.exp: print ss
Running ../../../W._C._Handy/gdb/testsuite/gdb.python/py-objfile.exp ...
PASS: gdb.python/py-objfile.exp: Find a symbol in objfile
PASS: gdb.python/py-objfile.exp: Get backing object file
PASS: gdb.python/py-objfile.exp: Get objfile validity
PASS: gdb.python/py-objfile.exp: Get objfile validity
PASS: gdb.python/py-objfile.exp: Get objfile validity after unload
Running ../../../W._C._Handy/gdb/testsuite/gdb.python/py-parameter.exp ...
PASS: gdb.python/py-parameter.exp: python print (gdb.parameter ('directories'))
PASS: gdb.python/py-parameter.exp: Simple gdb booleanparameter - python
PASS: gdb.python/py-parameter.exp: Simple gdb booleanparameter - class TestParam (gdb.Parameter):
PASS: gdb.python/py-parameter.exp: Simple gdb booleanparameter -    """When enabled, test param does something useful. When disabled, does nothing."""
PASS: gdb.python/py-parameter.exp: Simple gdb booleanparameter -    show_doc = "Show the state of the boolean test-param"
PASS: gdb.python/py-parameter.exp: Simple gdb booleanparameter -    set_doc = "Set the state of the boolean test-param"
PASS: gdb.python/py-parameter.exp: Simple gdb booleanparameter -    def get_show_string (self, pvalue):
PASS: gdb.python/py-parameter.exp: Simple gdb booleanparameter -       return "The state of the Test Parameter is " + pvalue
PASS: gdb.python/py-parameter.exp: Simple gdb booleanparameter -    def get_set_string (self):
PASS: gdb.python/py-parameter.exp: Simple gdb booleanparameter -       val = "on"
PASS: gdb.python/py-parameter.exp: Simple gdb booleanparameter -       if (self.value == False):
PASS: gdb.python/py-parameter.exp: Simple gdb booleanparameter -          val = "off"
PASS: gdb.python/py-parameter.exp: Simple gdb booleanparameter -       return "Test Parameter has been set to " + val
PASS: gdb.python/py-parameter.exp: Simple gdb booleanparameter -    def __init__ (self, name):
PASS: gdb.python/py-parameter.exp: Simple gdb booleanparameter -       super (TestParam, self).__init__ (name, gdb.COMMAND_DATA, gdb.PARAM_BOOLEAN)
PASS: gdb.python/py-parameter.exp: Simple gdb booleanparameter -       self.value = True
PASS: gdb.python/py-parameter.exp: Simple gdb booleanparameter - test_param = TestParam ('print test-param')
PASS: gdb.python/py-parameter.exp: Simple gdb booleanparameter - end
PASS: gdb.python/py-parameter.exp: Test parameter value
PASS: gdb.python/py-parameter.exp: Show parameter on
PASS: gdb.python/py-parameter.exp: Turn off parameter
PASS: gdb.python/py-parameter.exp: Show parameter off
PASS: gdb.python/py-parameter.exp: Test parameter value
PASS: gdb.python/py-parameter.exp: Test show help
PASS: gdb.python/py-parameter.exp: Test set help
PASS: gdb.python/py-parameter.exp: Test general help
PASS: gdb.python/py-parameter.exp: enum gdb parameter - python
PASS: gdb.python/py-parameter.exp: enum gdb parameter - class TestEnumParam (gdb.Parameter):
PASS: gdb.python/py-parameter.exp: enum gdb parameter -    """When set, test param does something useful. When disabled, does nothing."""
PASS: gdb.python/py-parameter.exp: enum gdb parameter -    show_doc = "Show the state of the enum"
PASS: gdb.python/py-parameter.exp: enum gdb parameter -    set_doc = "Set the state of the enum"
PASS: gdb.python/py-parameter.exp: enum gdb parameter -    def get_show_string (self, pvalue):
PASS: gdb.python/py-parameter.exp: enum gdb parameter -       return "The state of the enum is " + pvalue
PASS: gdb.python/py-parameter.exp: enum gdb parameter -    def get_set_string (self):
PASS: gdb.python/py-parameter.exp: enum gdb parameter -       return "The state of the enum has been set to " + self.value
PASS: gdb.python/py-parameter.exp: enum gdb parameter -    def __init__ (self, name):
PASS: gdb.python/py-parameter.exp: enum gdb parameter -       super (TestEnumParam, self).__init__ (name, gdb.COMMAND_DATA, gdb.PARAM_ENUM, ["one", "two"])
PASS: gdb.python/py-parameter.exp: enum gdb parameter -       self.value = "one"
PASS: gdb.python/py-parameter.exp: enum gdb parameter - test_enum_param = TestEnumParam ('print test-enum-param')
PASS: gdb.python/py-parameter.exp: enum gdb parameter - end
PASS: gdb.python/py-parameter.exp: Test enum parameter value
PASS: gdb.python/py-parameter.exp: Show parameter is initial value
PASS: gdb.python/py-parameter.exp: Set enum to two
PASS: gdb.python/py-parameter.exp: Show parameter is new value
PASS: gdb.python/py-parameter.exp: Test enum parameter value
PASS: gdb.python/py-parameter.exp: Set invalid enum parameter
PASS: gdb.python/py-parameter.exp: file gdb parameter - python
PASS: gdb.python/py-parameter.exp: file gdb parameter - class TestFileParam (gdb.Parameter):
PASS: gdb.python/py-parameter.exp: file gdb parameter -    """When set, test param does something useful. When disabled, does nothing."""
PASS: gdb.python/py-parameter.exp: file gdb parameter -    show_doc = "Show the name of the file"
PASS: gdb.python/py-parameter.exp: file gdb parameter -    set_doc = "Set the name of the file"
PASS: gdb.python/py-parameter.exp: file gdb parameter -    def get_show_string (self, pvalue):
PASS: gdb.python/py-parameter.exp: file gdb parameter -       return "The name of the file is " + pvalue
PASS: gdb.python/py-parameter.exp: file gdb parameter -    def get_set_string (self):
PASS: gdb.python/py-parameter.exp: file gdb parameter -       return "The name of the file has been changed to " + self.value
PASS: gdb.python/py-parameter.exp: file gdb parameter -    def __init__ (self, name):
PASS: gdb.python/py-parameter.exp: file gdb parameter -       super (TestFileParam, self).__init__ (name, gdb.COMMAND_FILES, gdb.PARAM_FILENAME)
PASS: gdb.python/py-parameter.exp: file gdb parameter -       self.value = "foo.txt"
PASS: gdb.python/py-parameter.exp: file gdb parameter - test_file_param = TestFileParam ('test-file-param')
PASS: gdb.python/py-parameter.exp: file gdb parameter - end
PASS: gdb.python/py-parameter.exp: Test file parameter value
PASS: gdb.python/py-parameter.exp: Show initial file value
PASS: gdb.python/py-parameter.exp: Set new file parameter
PASS: gdb.python/py-parameter.exp: Show new file value
PASS: gdb.python/py-parameter.exp: Test new file parameter value
PASS: gdb.python/py-parameter.exp: set test-file-param
PASS: gdb.python/py-parameter.exp: Simple gdb booleanparameter - python
PASS: gdb.python/py-parameter.exp: Simple gdb booleanparameter - class TestUndocParam (gdb.Parameter):
PASS: gdb.python/py-parameter.exp: Simple gdb booleanparameter -    def get_show_string (self, pvalue):
PASS: gdb.python/py-parameter.exp: Simple gdb booleanparameter -       return "The state of the Test Parameter is " + pvalue
PASS: gdb.python/py-parameter.exp: Simple gdb booleanparameter -    def get_set_string (self):
PASS: gdb.python/py-parameter.exp: Simple gdb booleanparameter -       val = "on"
PASS: gdb.python/py-parameter.exp: Simple gdb booleanparameter -       if (self.value == False):
PASS: gdb.python/py-parameter.exp: Simple gdb booleanparameter -          val = "off"
PASS: gdb.python/py-parameter.exp: Simple gdb booleanparameter -       return "Test Parameter has been set to " + val
PASS: gdb.python/py-parameter.exp: Simple gdb booleanparameter -    def __init__ (self, name):
PASS: gdb.python/py-parameter.exp: Simple gdb booleanparameter -       super (TestUndocParam, self).__init__ (name, gdb.COMMAND_DATA, gdb.PARAM_BOOLEAN)
PASS: gdb.python/py-parameter.exp: Simple gdb booleanparameter -       self.value = True
PASS: gdb.python/py-parameter.exp: Simple gdb booleanparameter - test_undoc_param = TestUndocParam ('print test-undoc-param')
PASS: gdb.python/py-parameter.exp: Simple gdb booleanparameter - end
PASS: gdb.python/py-parameter.exp: Show parameter on
PASS: gdb.python/py-parameter.exp: Turn off parameter
PASS: gdb.python/py-parameter.exp: Show parameter off
PASS: gdb.python/py-parameter.exp: Test parameter value
PASS: gdb.python/py-parameter.exp: Test show help
PASS: gdb.python/py-parameter.exp: Test set help
PASS: gdb.python/py-parameter.exp: Test general help
PASS: gdb.python/py-parameter.exp: Simple gdb booleanparameter - python
PASS: gdb.python/py-parameter.exp: Simple gdb booleanparameter - class TestNodocParam (gdb.Parameter):
PASS: gdb.python/py-parameter.exp: Simple gdb booleanparameter -    def __init__ (self, name):
PASS: gdb.python/py-parameter.exp: Simple gdb booleanparameter -       super (TestNodocParam, self).__init__ (name, gdb.COMMAND_DATA, gdb.PARAM_BOOLEAN)
PASS: gdb.python/py-parameter.exp: Simple gdb booleanparameter -       self.value = True
PASS: gdb.python/py-parameter.exp: Simple gdb booleanparameter - test_nodoc_param = TestNodocParam ('print test-nodoc-param')
PASS: gdb.python/py-parameter.exp: Simple gdb booleanparameter - end
PASS: gdb.python/py-parameter.exp: Show parameter on
PASS: gdb.python/py-parameter.exp: Turn off parameter
PASS: gdb.python/py-parameter.exp: Show parameter off
PASS: gdb.python/py-parameter.exp: Test parameter value
PASS: gdb.python/py-parameter.exp: Test show help
PASS: gdb.python/py-parameter.exp: Test set help
PASS: gdb.python/py-parameter.exp: Test general help
PASS: gdb.python/py-parameter.exp: Simple gdb booleanparameter - python
PASS: gdb.python/py-parameter.exp: Simple gdb booleanparameter - class TestParam (gdb.Parameter):
PASS: gdb.python/py-parameter.exp: Simple gdb booleanparameter -    """When enabled, test param does something useful. When disabled, does nothing."""
PASS: gdb.python/py-parameter.exp: Simple gdb booleanparameter -    show_doc = "State of the Test Parameter"
PASS: gdb.python/py-parameter.exp: Simple gdb booleanparameter -    set_doc = "Set the state of the Test Parameter"
PASS: gdb.python/py-parameter.exp: Simple gdb booleanparameter -    def __init__ (self, name):
PASS: gdb.python/py-parameter.exp: Simple gdb booleanparameter -       super (TestParam, self).__init__ (name, gdb.COMMAND_DATA, gdb.PARAM_BOOLEAN)
PASS: gdb.python/py-parameter.exp: Simple gdb booleanparameter -       self.value = True
PASS: gdb.python/py-parameter.exp: Simple gdb booleanparameter - test_param = TestParam ('print test-param')
PASS: gdb.python/py-parameter.exp: Simple gdb booleanparameter - end
PASS: gdb.python/py-parameter.exp: Test parameter value
PASS: gdb.python/py-parameter.exp: Show parameter on
PASS: gdb.python/py-parameter.exp: Turn off parameter
PASS: gdb.python/py-parameter.exp: Show parameter off
PASS: gdb.python/py-parameter.exp: Test parameter value
PASS: gdb.python/py-parameter.exp: Test show help
PASS: gdb.python/py-parameter.exp: Test set help
PASS: gdb.python/py-parameter.exp: Test general help
Running ../../../W._C._Handy/gdb/testsuite/gdb.python/py-pp-maint.exp ...
PASS: gdb.python/py-pp-maint.exp: b 77
PASS: gdb.python/py-pp-maint.exp: continue
PASS: gdb.python/py-pp-maint.exp: info pretty-printer
PASS: gdb.python/py-pp-maint.exp: info pretty-printer global .*function
PASS: gdb.python/py-pp-maint.exp: info pretty-printer .* pp-test
PASS: gdb.python/py-pp-maint.exp: print flt enabled #1
PASS: gdb.python/py-pp-maint.exp: print ss enabled #1
PASS: gdb.python/py-pp-maint.exp: disable pretty-printer
PASS: gdb.python/py-pp-maint.exp: enable pretty-printer
PASS: gdb.python/py-pp-maint.exp: disable pretty-printer global
PASS: gdb.python/py-pp-maint.exp: enable pretty-printer
PASS: gdb.python/py-pp-maint.exp: disable pretty-printer global lookup_function_lookup_test
PASS: gdb.python/py-pp-maint.exp: disable pretty-printer global pp-test;.*
PASS: gdb.python/py-pp-maint.exp: info pretty-printer global .*function
PASS: gdb.python/py-pp-maint.exp: info pretty-printer .* pp-test
PASS: gdb.python/py-pp-maint.exp: print flt disabled
PASS: gdb.python/py-pp-maint.exp: print ss disabled
PASS: gdb.python/py-pp-maint.exp: enable pretty-printer global lookup_function_lookup_test
PASS: gdb.python/py-pp-maint.exp: enable pretty-printer global pp-test
PASS: gdb.python/py-pp-maint.exp: enable pretty-printer global pp-test;.*ss.*
PASS: gdb.python/py-pp-maint.exp: enable pretty-printer global pp-test;.*s.*
PASS: gdb.python/py-pp-maint.exp: enable pretty-printer global pp-test;.*
PASS: gdb.python/py-pp-maint.exp: info pretty-printer
PASS: gdb.python/py-pp-maint.exp: print flt re-enabled
PASS: gdb.python/py-pp-maint.exp: print ss re-enabled
PASS: gdb.python/py-pp-maint.exp: print FLAG_1
PASS: gdb.python/py-pp-maint.exp: print FLAG_1 | FLAG_3
PASS: gdb.python/py-pp-maint.exp: print FLAG_1 | 8
Running ../../../W._C._Handy/gdb/testsuite/gdb.python/py-prettyprint.exp ...
PASS: gdb.python/py-prettyprint.exp: set print pretty on
PASS: gdb.python/py-prettyprint.exp: b 351
PASS: gdb.python/py-prettyprint.exp: continue
PASS: gdb.python/py-prettyprint.exp: python exec (open ('py-prettyprint.py').read ())
PASS: gdb.python/py-prettyprint.exp: print ss
PASS: gdb.python/py-prettyprint.exp: print ssa[1]
PASS: gdb.python/py-prettyprint.exp: print ssa
PASS: gdb.python/py-prettyprint.exp: print arraystruct
PASS: gdb.python/py-prettyprint.exp: print ns2
PASS: gdb.python/py-prettyprint.exp: print x
PASS: gdb.python/py-prettyprint.exp: print cstring
PASS: gdb.python/py-prettyprint.exp: print estring
PASS: gdb.python/py-prettyprint.exp: python pp_ls_encoding = 'UTF-8'
PASS: gdb.python/py-prettyprint.exp: print estring2
PASS: gdb.python/py-prettyprint.exp: set python print-stack full
PASS: gdb.python/py-prettyprint.exp: print hint_error
PASS: gdb.python/py-prettyprint.exp: print c
PASS: gdb.python/py-prettyprint.exp: print nstype
PASS: gdb.python/py-prettyprint.exp: set print pretty off
PASS: gdb.python/py-prettyprint.exp: print nstype on one line
PASS: gdb.python/py-prettyprint.exp: continue until exit
PASS: gdb.python/py-prettyprint.exp: set print pretty on
PASS: gdb.python/py-prettyprint.exp: b 351
PASS: gdb.python/py-prettyprint.exp: continue
PASS: gdb.python/py-prettyprint.exp: python exec (open ('py-prettyprint.py').read ())
PASS: gdb.python/py-prettyprint.exp: print ss
PASS: gdb.python/py-prettyprint.exp: print ssa[1]
PASS: gdb.python/py-prettyprint.exp: print ssa
PASS: gdb.python/py-prettyprint.exp: print arraystruct
PASS: gdb.python/py-prettyprint.exp: print cps
PASS: gdb.python/py-prettyprint.exp: print cpss
PASS: gdb.python/py-prettyprint.exp: print cpssa[0]
PASS: gdb.python/py-prettyprint.exp: print cpssa[1]
PASS: gdb.python/py-prettyprint.exp: print cpssa
PASS: gdb.python/py-prettyprint.exp: print sss
PASS: gdb.python/py-prettyprint.exp: print ref
PASS: gdb.python/py-prettyprint.exp: print derived
PASS: gdb.python/py-prettyprint.exp: print ns
PASS: gdb.python/py-prettyprint.exp:
PASS: gdb.python/py-prettyprint.exp: print ns
PASS: gdb.python/py-prettyprint.exp:
PASS: gdb.python/py-prettyprint.exp: print ns
PASS: gdb.python/py-prettyprint.exp:
PASS: gdb.python/py-prettyprint.exp: print ns2
PASS: gdb.python/py-prettyprint.exp: print x
PASS: gdb.python/py-prettyprint.exp: print cstring
PASS: gdb.python/py-prettyprint.exp: print estring
PASS: gdb.python/py-prettyprint.exp: python pp_ls_encoding = 'UTF-8'
PASS: gdb.python/py-prettyprint.exp: print estring2
PASS: gdb.python/py-prettyprint.exp: set python print-stack full
PASS: gdb.python/py-prettyprint.exp: print hint_error
PASS: gdb.python/py-prettyprint.exp: print c
PASS: gdb.python/py-prettyprint.exp: print nstype
PASS: gdb.python/py-prettyprint.exp: set print pretty off
PASS: gdb.python/py-prettyprint.exp: print nstype on one line
PASS: gdb.python/py-prettyprint.exp: continue until exit
PASS: gdb.python/py-prettyprint.exp: python exec (open ('py-prettyprint.py').read ())
PASS: gdb.python/py-prettyprint.exp: continue to breakpoint: eval-break
PASS: gdb.python/py-prettyprint.exp: info locals
PASS: gdb.python/py-prettyprint.exp: b 351
PASS: gdb.python/py-prettyprint.exp: continue
PASS: gdb.python/py-prettyprint.exp: print ss enabled #1
PASS: gdb.python/py-prettyprint.exp: python disable_lookup_function ()
PASS: gdb.python/py-prettyprint.exp: print ss disabled
PASS: gdb.python/py-prettyprint.exp: python enable_lookup_function ()
PASS: gdb.python/py-prettyprint.exp: print ss enabled #2
Running ../../../W._C._Handy/gdb/testsuite/gdb.python/py-progspace.exp ...
PASS: gdb.python/py-progspace.exp: current progspace filename (None)
PASS: gdb.python/py-progspace.exp: python print (gdb.progspaces())
PASS: gdb.python/py-progspace.exp: current progspace filename (py-progspace)
Running ../../../W._C._Handy/gdb/testsuite/gdb.python/py-prompt.exp ...
PASS: gdb.python/py-prompt.exp: GDB initializing first prompt
PASS: gdb.python/py-prompt.exp: show prompt gets the correct result
PASS: gdb.python/py-prompt.exp: retrieving the prompt causes no extra prompt_hook calls
PASS: gdb.python/py-prompt.exp: prompt_hook argument is default prompt.
PASS: gdb.python/py-prompt.exp: GDB initializing first prompt
PASS: gdb.python/py-prompt.exp: show prompt gets the correct result 2
PASS: gdb.python/py-prompt.exp: retrieving the prompt causes no extra prompt_hook calls 2
PASS: gdb.python/py-prompt.exp: prompt_hook argument is default prompt. 2
PASS: gdb.python/py-prompt.exp: GDB initializing first prompt
PASS: gdb.python/py-prompt.exp: show prompt gets the correct result 3
PASS: gdb.python/py-prompt.exp: retrieving the prompt causes no extra prompt_hook calls 3
PASS: gdb.python/py-prompt.exp: prompt_hook argument is default prompt. 3
PASS: gdb.python/py-prompt.exp: GDB initializing first prompt
PASS: gdb.python/py-prompt.exp: show prompt gets the correct result 4
PASS: gdb.python/py-prompt.exp: retrieving the prompt causes no extra prompt_hook calls 4
PASS: gdb.python/py-prompt.exp: prompt_hook argument is default prompt. 4
Running ../../../W._C._Handy/gdb/testsuite/gdb.python/py-section-script.exp ...
PASS: gdb.python/py-section-script.exp: set auto-load safe-path
PASS: gdb.python/py-section-script.exp: info auto-load python-scripts
PASS: gdb.python/py-section-script.exp: info auto-load python-scripts py-section-script
PASS: gdb.python/py-section-script.exp: info auto-load python-scripts no-script-matches-this
PASS: gdb.python/py-section-script.exp: b 51
PASS: gdb.python/py-section-script.exp: continue
PASS: gdb.python/py-section-script.exp: print ss
Running ../../../W._C._Handy/gdb/testsuite/gdb.python/py-shared.exp ...
PASS: gdb.python/py-shared.exp: func1 address
PASS: gdb.python/py-shared.exp: Aquire func1 address
PASS: gdb.python/py-shared.exp: test func1 solib location
PASS: gdb.python/py-shared.exp: main address
PASS: gdb.python/py-shared.exp: Aquire main address
PASS: gdb.python/py-shared.exp: test main solib location
Running ../../../W._C._Handy/gdb/testsuite/gdb.python/py-strfns.exp ...
PASS: gdb.python/py-strfns.exp: p $_streq (str1, str2)
PASS: gdb.python/py-strfns.exp: p $_streq (str1, str3)
PASS: gdb.python/py-strfns.exp: p $_strlen (str1)
PASS: gdb.python/py-strfns.exp: p $_strlen (buf1)
PASS: gdb.python/py-strfns.exp: p $_memeq (buf1, buf2, 4)
PASS: gdb.python/py-strfns.exp: p $_memeq (buf1, buf3, 4)
PASS: gdb.python/py-strfns.exp: p $_regex (str1, "Hello")
PASS: gdb.python/py-strfns.exp: p $_regex (str1, "Help")
PASS: gdb.python/py-strfns.exp: p $_regex (str1, "^Hello")
PASS: gdb.python/py-strfns.exp: p $_regex (str1, "^Hello.$")
PASS: gdb.python/py-strfns.exp: condition $bpnum $_streq (arg, "Goodbye.")
PASS: gdb.python/py-strfns.exp: continue to breakpoint: Break func here.
PASS: gdb.python/py-strfns.exp: p arg
PASS: gdb.python/py-strfns.exp: condition $bpnum $_memeq (arg, buf3, 4)
PASS: gdb.python/py-strfns.exp: continue to breakpoint: Break bfunc here.
PASS: gdb.python/py-strfns.exp: p /d {char[4]} arg
PASS: gdb.python/py-strfns.exp: save a corefile
PASS: gdb.python/py-strfns.exp: re-load generated corefile
PASS: gdb.python/py-strfns.exp: p $_streq (str1, str2)
PASS: gdb.python/py-strfns.exp: p $_streq (str1, str3)
PASS: gdb.python/py-strfns.exp: p $_strlen (str1)
PASS: gdb.python/py-strfns.exp: p $_strlen (buf1)
PASS: gdb.python/py-strfns.exp: p $_memeq (buf1, buf2, 4)
PASS: gdb.python/py-strfns.exp: p $_memeq (buf1, buf3, 4)
PASS: gdb.python/py-strfns.exp: p $_regex (str1, "Hello")
PASS: gdb.python/py-strfns.exp: p $_regex (str1, "Help")
PASS: gdb.python/py-strfns.exp: p $_regex (str1, "^Hello")
PASS: gdb.python/py-strfns.exp: p $_regex (str1, "^Hello.$")
Running ../../../W._C._Handy/gdb/testsuite/gdb.python/py-symbol.exp ...
PASS: gdb.python/py-symbol.exp: Lookup main
PASS: gdb.python/py-symbol.exp: Test main_func.is_function
PASS: gdb.python/py-symbol.exp: Test lookup_global_symbol("junk")
PASS: gdb.python/py-symbol.exp: print value of main
PASS: gdb.python/py-symbol.exp: print line number of qq
PASS: gdb.python/py-symbol.exp: print value of qq
PASS: gdb.python/py-symbol.exp: print whether qq needs a frame
PASS: gdb.python/py-symbol.exp: continue to breakpoint: Block break here.
PASS: gdb.python/py-symbol.exp: Test arg.is_variable
PASS: gdb.python/py-symbol.exp: Test arg.is_constant
PASS: gdb.python/py-symbol.exp: Test arg.is_argument
PASS: gdb.python/py-symbol.exp: Test arg.is_function
PASS: gdb.python/py-symbol.exp: Test func.is_variable
PASS: gdb.python/py-symbol.exp: Test func.is_constant
PASS: gdb.python/py-symbol.exp: Test func.is_argument
PASS: gdb.python/py-symbol.exp: Test func.is_function
PASS: gdb.python/py-symbol.exp: Test func.name
PASS: gdb.python/py-symbol.exp: Test func.print_name
PASS: gdb.python/py-symbol.exp: Test func.linkage_name
PASS: gdb.python/py-symbol.exp: Test func.addr_class
PASS: gdb.python/py-symbol.exp: continue to breakpoint: Break at end.
PASS: gdb.python/py-symbol.exp: Test a.is_variable
PASS: gdb.python/py-symbol.exp: Test a.is_constant
PASS: gdb.python/py-symbol.exp: Test a.is_argument
PASS: gdb.python/py-symbol.exp: Test a.is_function
PASS: gdb.python/py-symbol.exp: Test a.addr_class
PASS: gdb.python/py-symbol.exp: try to print value of a without a frame
PASS: gdb.python/py-symbol.exp: print value of a
PASS: gdb.python/py-symbol.exp: print whether a needs a frame
PASS: gdb.python/py-symbol.exp: Test t.is_variable
PASS: gdb.python/py-symbol.exp: Test t.is_constant
PASS: gdb.python/py-symbol.exp: Test t.is_argument
PASS: gdb.python/py-symbol.exp: Test t.is_function
PASS: gdb.python/py-symbol.exp: Test t.addr_class
PASS: gdb.python/py-symbol.exp: Get type
PASS: gdb.python/py-symbol.exp: Get symtab
PASS: gdb.python/py-symbol.exp: continue to breakpoint: Break in class.
PASS: gdb.python/py-symbol.exp: Test func.is_variable
PASS: gdb.python/py-symbol.exp: Test func.is_constant
PASS: gdb.python/py-symbol.exp: Test func.is_argument
PASS: gdb.python/py-symbol.exp: Test func.is_function
PASS: gdb.python/py-symbol.exp: Test func.name
PASS: gdb.python/py-symbol.exp: Test func.print_name
PASS: gdb.python/py-symbol.exp: Test func.linkage_name
PASS: gdb.python/py-symbol.exp: Test func.addr_class
PASS: gdb.python/py-symbol.exp: continue to breakpoint: Break at end.
PASS: gdb.python/py-symbol.exp: Test symbol validity
PASS: gdb.python/py-symbol.exp: Test symbol validity
PASS: gdb.python/py-symbol.exp: Test symbol destructor
Running ../../../W._C._Handy/gdb/testsuite/gdb.python/py-symtab.exp ...
PASS: gdb.python/py-symtab.exp: continue to breakpoint: Block break here.
PASS: gdb.python/py-symtab.exp: Test symtab
PASS: gdb.python/py-symtab.exp: Test sal.pc
PASS: gdb.python/py-symtab.exp: Test sal.last
PASS: gdb.python/py-symtab.exp: Test sal.line
PASS: gdb.python/py-symtab.exp: Test sal.is_valid
PASS: gdb.python/py-symtab.exp: Test symtab.filename
PASS: gdb.python/py-symtab.exp: Test symtab.objfile
PASS: gdb.python/py-symtab.exp: Test symtab.fullname
PASS: gdb.python/py-symtab.exp: Test symtab.is_valid()
PASS: gdb.python/py-symtab.exp: Test qq in global symbols
PASS: gdb.python/py-symtab.exp: Test func in global symbols
PASS: gdb.python/py-symtab.exp: Test main in global symbols
PASS: gdb.python/py-symtab.exp: Test int in static symbols
PASS: gdb.python/py-symtab.exp: Test char in static symbols
PASS: gdb.python/py-symtab.exp: Test simple_struct in static symbols
PASS: gdb.python/py-symtab.exp: Test sal.is_valid
PASS: gdb.python/py-symtab.exp: Test symtab.is_valid()
PASS: gdb.python/py-symtab.exp: Test sal destructor
PASS: gdb.python/py-symtab.exp: Test symtab destructor
Running ../../../W._C._Handy/gdb/testsuite/gdb.python/py-sync-interp.exp ...
PASS: gdb.python/py-sync-interp.exp: attach and where
Running ../../../W._C._Handy/gdb/testsuite/gdb.python/py-template.exp ...
PASS: gdb.python/py-template.exp: print (foo)
PASS: gdb.python/py-template.exp: python foo = gdb.history(0)
PASS: gdb.python/py-template.exp: const int
PASS: gdb.python/py-template.exp: print (foo)
PASS: gdb.python/py-template.exp: python foo = gdb.history(0)
PASS: gdb.python/py-template.exp: volatile int
PASS: gdb.python/py-template.exp: print (foo)
PASS: gdb.python/py-template.exp: python foo = gdb.history(0)
PASS: gdb.python/py-template.exp: const int &
PASS: gdb.python/py-template.exp: print (foo)
PASS: gdb.python/py-template.exp: python foo = gdb.history(0)
PASS: gdb.python/py-template.exp: volatile int &
PASS: gdb.python/py-template.exp: print (foo)
PASS: gdb.python/py-template.exp: python foo = gdb.history(0)
PASS: gdb.python/py-template.exp: volatile int * const
PASS: gdb.python/py-template.exp: print (foo)
PASS: gdb.python/py-template.exp: python foo = gdb.history(0)
PASS: gdb.python/py-template.exp: volatile int * const *
PASS: gdb.python/py-template.exp: print (foo)
PASS: gdb.python/py-template.exp: python foo = gdb.history(0)
PASS: gdb.python/py-template.exp: const int * volatile
PASS: gdb.python/py-template.exp: print (foo)
PASS: gdb.python/py-template.exp: python foo = gdb.history(0)
PASS: gdb.python/py-template.exp: const int * volatile * const * volatile *
Running ../../../W._C._Handy/gdb/testsuite/gdb.python/py-type.exp ...
PASS: gdb.python/py-type.exp: lang_c: continue to breakpoint: break to inspect struct and array.
PASS: gdb.python/py-type.exp: lang_c: test_fields: c typedef field list
PASS: gdb.python/py-type.exp: lang_c: test_fields: print value (st)
PASS: gdb.python/py-type.exp: lang_c: test_fields: get value (st) from history
PASS: gdb.python/py-type.exp: lang_c: test_fields: get fields from st.type
PASS: gdb.python/py-type.exp: lang_c: test_fields: Check number of fields (st)
PASS: gdb.python/py-type.exp: lang_c: test_fields: Check structure field a name
PASS: gdb.python/py-type.exp: lang_c: test_fields: Check structure field b name
PASS: gdb.python/py-type.exp: lang_c: test_fields: Check that dir includes name
PASS: gdb.python/py-type.exp: lang_c: test_fields: Check number of fields (st.type)
PASS: gdb.python/py-type.exp: lang_c: test_fields: Check fields lookup by name
PASS: gdb.python/py-type.exp: lang_c: test_fields: Check fields iteration over values
PASS: gdb.python/py-type.exp: lang_c: test_fields: Check fields items list
PASS: gdb.python/py-type.exp: lang_c: test_fields: Check field name exists test
PASS: gdb.python/py-type.exp: lang_c: test_fields: Check field name nonexists test
PASS: gdb.python/py-type.exp: lang_c: test_fields: Check conversion to bool
PASS: gdb.python/py-type.exp: lang_c: test_fields: python print (len (st.type['a'].type))
PASS: gdb.python/py-type.exp: lang_c: test_fields: python print (st.type['a'].type.has_key ('x'))
PASS: gdb.python/py-type.exp: lang_c: test_fields: python print (st.type['a'].type.keys ())
PASS: gdb.python/py-type.exp: lang_c: test_fields: python print (st.type['a'].type['x'])
PASS: gdb.python/py-type.exp: lang_c: test_fields: python print (not not st.type['a'].type)
PASS: gdb.python/py-type.exp: lang_c: test_fields: print value (ar)
PASS: gdb.python/py-type.exp: lang_c: test_fields: get value (ar) from history
PASS: gdb.python/py-type.exp: lang_c: test_fields: python fields = ar.type.fields()
PASS: gdb.python/py-type.exp: lang_c: test_fields: Check the number of fields
PASS: gdb.python/py-type.exp: lang_c: test_fields: Check array field type
PASS: gdb.python/py-type.exp: lang_c: test_fields: cast to array with one argument
PASS: gdb.python/py-type.exp: lang_c: test_fields: cast to array with two arguments
PASS: gdb.python/py-type.exp: lang_c: test_fields: python print (ar[0].type == ar[0].type)
PASS: gdb.python/py-type.exp: lang_c: test_fields: print value (vec_data_1)
PASS: gdb.python/py-type.exp: lang_c: test_fields: get value (vec_data_1) from history
PASS: gdb.python/py-type.exp: lang_c: test_fields: print value (vec_data_2)
PASS: gdb.python/py-type.exp: lang_c: test_fields: get value (vec_data_2) from history
PASS: gdb.python/py-type.exp: lang_c: test_fields: set vec1
PASS: gdb.python/py-type.exp: lang_c: test_fields: cast to vector with one argument
PASS: gdb.python/py-type.exp: lang_c: test_fields: set vec2
PASS: gdb.python/py-type.exp: lang_c: test_fields: cast to vector with two arguments
PASS: gdb.python/py-type.exp: lang_c: test_fields: python print (vec1 == vec2)
PASS: gdb.python/py-type.exp: lang_c: test_fields: set vec3
PASS: gdb.python/py-type.exp: lang_c: test_fields: python print (vec1 == vec3)
PASS: gdb.python/py-type.exp: lang_c: test_enum: print value (e)
PASS: gdb.python/py-type.exp: lang_c: test_enum: get value (e) from history
PASS: gdb.python/py-type.exp: lang_c: test_enum: extract type fields from e
PASS: gdb.python/py-type.exp: lang_c: test_enum: Check the number of enum fields
PASS: gdb.python/py-type.exp: lang_c: test_enum: Check enum field[0] name
PASS: gdb.python/py-type.exp: lang_c: test_enum: Check enum field[1]name
PASS: gdb.python/py-type.exp: lang_c: test_enum: Check the number of type fields
PASS: gdb.python/py-type.exp: lang_c: test_enum: Check enum field lookup by name (v1)
PASS: gdb.python/py-type.exp: lang_c: test_enum: Check enum field lookup by name (v2)
PASS: gdb.python/py-type.exp: lang_c: test_enum: Check num fields iteration over values
PASS: gdb.python/py-type.exp: lang_c: test_enum: Check enum fields items list
PASS: gdb.python/py-type.exp: lang_cpp: continue to breakpoint: break to inspect struct and array.
PASS: gdb.python/py-type.exp: lang_cpp: test_fields: c++ typedef field list
PASS: gdb.python/py-type.exp: lang_cpp: test_fields: print value (c)
PASS: gdb.python/py-type.exp: lang_cpp: test_fields: get value (c) from history
PASS: gdb.python/py-type.exp: lang_cpp: test_fields: get fields from c.type
PASS: gdb.python/py-type.exp: lang_cpp: test_fields: Check number of fields (c)
PASS: gdb.python/py-type.exp: lang_cpp: test_fields: Check class field c name
PASS: gdb.python/py-type.exp: lang_cpp: test_fields: Check class field d name
PASS: gdb.python/py-type.exp: lang_cpp: test_fields: python print (c.type == gdb.parse_and_eval('d').type)
PASS: gdb.python/py-type.exp: lang_cpp: test_fields: python print (c.type == gdb.parse_and_eval('d').type.fields()[0].type)
PASS: gdb.python/py-type.exp: lang_cpp: test_fields: print value (st)
PASS: gdb.python/py-type.exp: lang_cpp: test_fields: get value (st) from history
PASS: gdb.python/py-type.exp: lang_cpp: test_fields: get fields from st.type
PASS: gdb.python/py-type.exp: lang_cpp: test_fields: Check number of fields (st)
PASS: gdb.python/py-type.exp: lang_cpp: test_fields: Check structure field a name
PASS: gdb.python/py-type.exp: lang_cpp: test_fields: Check structure field b name
PASS: gdb.python/py-type.exp: lang_cpp: test_fields: Check that dir includes name
PASS: gdb.python/py-type.exp: lang_cpp: test_fields: Check number of fields (st.type)
PASS: gdb.python/py-type.exp: lang_cpp: test_fields: Check fields lookup by name
PASS: gdb.python/py-type.exp: lang_cpp: test_fields: Check fields iteration over values
PASS: gdb.python/py-type.exp: lang_cpp: test_fields: Check fields items list
PASS: gdb.python/py-type.exp: lang_cpp: test_fields: Check field name exists test
PASS: gdb.python/py-type.exp: lang_cpp: test_fields: Check field name nonexists test
PASS: gdb.python/py-type.exp: lang_cpp: test_fields: Check conversion to bool
PASS: gdb.python/py-type.exp: lang_cpp: test_fields: python print (len (st.type['a'].type))
PASS: gdb.python/py-type.exp: lang_cpp: test_fields: python print (st.type['a'].type.has_key ('x'))
PASS: gdb.python/py-type.exp: lang_cpp: test_fields: python print (st.type['a'].type.keys ())
PASS: gdb.python/py-type.exp: lang_cpp: test_fields: python print (st.type['a'].type['x'])
PASS: gdb.python/py-type.exp: lang_cpp: test_fields: python print (not not st.type['a'].type)
PASS: gdb.python/py-type.exp: lang_cpp: test_fields: print value (ar)
PASS: gdb.python/py-type.exp: lang_cpp: test_fields: get value (ar) from history
PASS: gdb.python/py-type.exp: lang_cpp: test_fields: python fields = ar.type.fields()
PASS: gdb.python/py-type.exp: lang_cpp: test_fields: Check the number of fields
PASS: gdb.python/py-type.exp: lang_cpp: test_fields: Check array field type
PASS: gdb.python/py-type.exp: lang_cpp: test_fields: cast to array with one argument
PASS: gdb.python/py-type.exp: lang_cpp: test_fields: cast to array with two arguments
PASS: gdb.python/py-type.exp: lang_cpp: test_fields: python print (ar[0].type == ar[0].type)
PASS: gdb.python/py-type.exp: lang_cpp: test_fields: print value (vec_data_1)
PASS: gdb.python/py-type.exp: lang_cpp: test_fields: get value (vec_data_1) from history
PASS: gdb.python/py-type.exp: lang_cpp: test_fields: print value (vec_data_2)
PASS: gdb.python/py-type.exp: lang_cpp: test_fields: get value (vec_data_2) from history
PASS: gdb.python/py-type.exp: lang_cpp: test_fields: set vec1
PASS: gdb.python/py-type.exp: lang_cpp: test_fields: cast to vector with one argument
PASS: gdb.python/py-type.exp: lang_cpp: test_fields: set vec2
PASS: gdb.python/py-type.exp: lang_cpp: test_fields: cast to vector with two arguments
PASS: gdb.python/py-type.exp: lang_cpp: test_fields: python print (vec1 == vec2)
PASS: gdb.python/py-type.exp: lang_cpp: test_fields: set vec3
PASS: gdb.python/py-type.exp: lang_cpp: test_fields: python print (vec1 == vec3)
PASS: gdb.python/py-type.exp: lang_cpp: test_base_class: print value (d)
PASS: gdb.python/py-type.exp: lang_cpp: test_base_class: get value (d) from history
PASS: gdb.python/py-type.exp: lang_cpp: test_base_class: extract type fields from d
PASS: gdb.python/py-type.exp: lang_cpp: test_base_class: Check the number of fields
PASS: gdb.python/py-type.exp: lang_cpp: test_base_class: Check base class (fields[0])
PASS: gdb.python/py-type.exp: lang_cpp: test_base_class: Check base class (fields[1])
PASS: gdb.python/py-type.exp: lang_cpp: test_range: on ranged value: print value (ar)
PASS: gdb.python/py-type.exp: lang_cpp: test_range: on ranged value: get value (ar) from history
PASS: gdb.python/py-type.exp: lang_cpp: test_range: on ranged value: Check correct tuple length
PASS: gdb.python/py-type.exp: lang_cpp: test_range: on ranged value: Check range low bound
PASS: gdb.python/py-type.exp: lang_cpp: test_range: on ranged value: Check range high bound
PASS: gdb.python/py-type.exp: lang_cpp: test_range: on ranged type: print value (ar)
PASS: gdb.python/py-type.exp: lang_cpp: test_range: on ranged type: get value (ar) from history
PASS: gdb.python/py-type.exp: lang_cpp: test_range: on ranged type: get fields
PASS: gdb.python/py-type.exp: lang_cpp: test_range: on ranged type: Check range low bound
PASS: gdb.python/py-type.exp: lang_cpp: test_range: on ranged type: Check range high bound
PASS: gdb.python/py-type.exp: lang_cpp: test_range: on unranged value: print value (st)
PASS: gdb.python/py-type.exp: lang_cpp: test_range: on unranged value: get value (st) from history
PASS: gdb.python/py-type.exp: lang_cpp: test_range: on unranged value: Check range for non ranged type.
PASS: gdb.python/py-type.exp: lang_cpp: get type of temvar
PASS: gdb.python/py-type.exp: lang_cpp: python print (ttype.template_argument(0))
PASS: gdb.python/py-type.exp: lang_cpp: python print (isinstance(ttype.template_argument(0), gdb.Type))
PASS: gdb.python/py-type.exp: lang_cpp: python print (ttype.template_argument(1))
PASS: gdb.python/py-type.exp: lang_cpp: python print (isinstance(ttype.template_argument(1), gdb.Value))
PASS: gdb.python/py-type.exp: lang_cpp: python print (ttype.template_argument(2))
PASS: gdb.python/py-type.exp: lang_cpp: test_enum: print value (e)
PASS: gdb.python/py-type.exp: lang_cpp: test_enum: get value (e) from history
PASS: gdb.python/py-type.exp: lang_cpp: test_enum: extract type fields from e
PASS: gdb.python/py-type.exp: lang_cpp: test_enum: Check the number of enum fields
PASS: gdb.python/py-type.exp: lang_cpp: test_enum: Check enum field[0] name
PASS: gdb.python/py-type.exp: lang_cpp: test_enum: Check enum field[1]name
PASS: gdb.python/py-type.exp: lang_cpp: test_enum: Check the number of type fields
PASS: gdb.python/py-type.exp: lang_cpp: test_enum: Check enum field lookup by name (v1)
PASS: gdb.python/py-type.exp: lang_cpp: test_enum: Check enum field lookup by name (v2)
PASS: gdb.python/py-type.exp: lang_cpp: test_enum: Check num fields iteration over values
PASS: gdb.python/py-type.exp: lang_cpp: test_enum: Check enum fields items list
Running ../../../W._C._Handy/gdb/testsuite/gdb.python/py-typeprint.exp ...
PASS: gdb.python/py-typeprint.exp: python exec (open ('py-typeprint.py').read ())
PASS: gdb.python/py-typeprint.exp: basic test
PASS: gdb.python/py-typeprint.exp: raw test
PASS: gdb.python/py-typeprint.exp: disable type-printer string
PASS: gdb.python/py-typeprint.exp: whatis with disabled printer
PASS: gdb.python/py-typeprint.exp: info type-printers
PASS: gdb.python/py-typeprint.exp: enable type-printer string
PASS: gdb.python/py-typeprint.exp: whatis with enabled printer
PASS: gdb.python/py-typeprint.exp: whatis s
Running ../../../W._C._Handy/gdb/testsuite/gdb.python/py-value-cc.exp ...
PASS: gdb.python/py-value-cc.exp: continue to breakpoint: Break here
PASS: gdb.python/py-value-cc.exp: python print (str(gdb.parse_and_eval("a").type))
PASS: gdb.python/py-value-cc.exp: python print (str(gdb.parse_and_eval("a").referenced_value().type))
PASS: gdb.python/py-value-cc.exp: python print (str(gdb.parse_and_eval("int_ref").type))
PASS: gdb.python/py-value-cc.exp: python print (str(gdb.parse_and_eval("int_ref").referenced_value().type))
PASS: gdb.python/py-value-cc.exp: python print (str(gdb.parse_and_eval("int_ref").referenced_value()))
PASS: gdb.python/py-value-cc.exp: python print (str(gdb.parse_and_eval("int_ptr_ref").dereference().type))
PASS: gdb.python/py-value-cc.exp: python print (str(gdb.parse_and_eval("int_ptr_ref").referenced_value().type))
PASS: gdb.python/py-value-cc.exp: python print (str(gdb.parse_and_eval("int_ptr_ref").referenced_value().dereference()))
PASS: gdb.python/py-value-cc.exp: python print (str(gdb.parse_and_eval("int_ptr_ref").referenced_value().referenced_value()))
Running ../../../W._C._Handy/gdb/testsuite/gdb.python/py-value.exp ...
PASS: gdb.python/py-value.exp: create boolean value
PASS: gdb.python/py-value.exp: create integer value
PASS: gdb.python/py-value.exp: create long value
PASS: gdb.python/py-value.exp: create double value
PASS: gdb.python/py-value.exp: create 8-bit string value
PASS: gdb.python/py-value.exp: print 8-bit string
PASS: gdb.python/py-value.exp: verify type of 8-bit string
PASS: gdb.python/py-value.exp: create unicode value
PASS: gdb.python/py-value.exp: print Unicode string
PASS: gdb.python/py-value.exp: verify type of unicode string
PASS: gdb.python/py-value.exp: Test address attribute in non-addressable value
PASS: gdb.python/py-value.exp: add two integer values
PASS: gdb.python/py-value.exp: verify type of integer add result
PASS: gdb.python/py-value.exp: add two double values
PASS: gdb.python/py-value.exp: subtract two integer values
PASS: gdb.python/py-value.exp: subtract two double values
PASS: gdb.python/py-value.exp: multiply two integer values
PASS: gdb.python/py-value.exp: multiply two double values
PASS: gdb.python/py-value.exp: divide two integer values
PASS: gdb.python/py-value.exp: divide two double values
PASS: gdb.python/py-value.exp: take remainder of two integer values
PASS: gdb.python/py-value.exp: integer value raised to the power of another integer value
PASS: gdb.python/py-value.exp: double value raised to the power of integer value
PASS: gdb.python/py-value.exp: negated integer value
PASS: gdb.python/py-value.exp: positive integer value
PASS: gdb.python/py-value.exp: negated double value
PASS: gdb.python/py-value.exp: positive double value
PASS: gdb.python/py-value.exp: absolute of integer value
PASS: gdb.python/py-value.exp: absolute of double value
PASS: gdb.python/py-value.exp: subtract integer value from python integer
PASS: gdb.python/py-value.exp: verify type of mixed integer subtraction result
PASS: gdb.python/py-value.exp: add double value with python float
PASS: gdb.python/py-value.exp: subtract python integer from integer value
PASS: gdb.python/py-value.exp: add python float with double value
PASS: gdb.python/py-value.exp: print evalue
PASS: gdb.python/py-value.exp: python evalue = gdb.history (0)
PASS: gdb.python/py-value.exp: python print (int (evalue))
PASS: gdb.python/py-value.exp: add pointer value with python integer
PASS: gdb.python/py-value.exp: subtract python integer from pointer value
PASS: gdb.python/py-value.exp: subtract two pointer values
PASS: gdb.python/py-value.exp: catch error in python type conversion
PASS: gdb.python/py-value.exp: catch throw of GDB error
PASS: gdb.python/py-value.exp: define function to test booleans - python
PASS: gdb.python/py-value.exp: define function to test booleans - def test_bool (val):
PASS: gdb.python/py-value.exp: define function to test booleans -   if val:
PASS: gdb.python/py-value.exp: define function to test booleans -     print ('yay')
PASS: gdb.python/py-value.exp: define function to test booleans -   else:
PASS: gdb.python/py-value.exp: define function to test booleans -     print ('nay')
PASS: gdb.python/py-value.exp: define function to test booleans - end
PASS: gdb.python/py-value.exp: check evaluation of true boolean value in expression
PASS: gdb.python/py-value.exp: check evaluation of false boolean value in expression
PASS: gdb.python/py-value.exp: check evaluation of true integer value in expression
PASS: gdb.python/py-value.exp: check evaluation of false integer value in expression
PASS: gdb.python/py-value.exp: check evaluation of true integer value in expression
PASS: gdb.python/py-value.exp: check evaluation of false integer value in expression
PASS: gdb.python/py-value.exp: less than, equal
PASS: gdb.python/py-value.exp: less than, less
PASS: gdb.python/py-value.exp: less than, greater
PASS: gdb.python/py-value.exp: less than, None
PASS: gdb.python/py-value.exp: less or equal, equal
PASS: gdb.python/py-value.exp: less or equal, less
PASS: gdb.python/py-value.exp: less or equal, greater
PASS: gdb.python/py-value.exp: less or equal, None
PASS: gdb.python/py-value.exp: equality of gdb.Values
PASS: gdb.python/py-value.exp: inequality of gdb.Values
PASS: gdb.python/py-value.exp: equality of gdb.Value with Python value
PASS: gdb.python/py-value.exp: inequality of gdb.Value with Python value
PASS: gdb.python/py-value.exp: inequality of gdb.Value with None
PASS: gdb.python/py-value.exp: inequality, false
PASS: gdb.python/py-value.exp: inequality, true
PASS: gdb.python/py-value.exp: inequality, None
PASS: gdb.python/py-value.exp: greater than, equal
PASS: gdb.python/py-value.exp: greater than, less
PASS: gdb.python/py-value.exp: greater than, greater
PASS: gdb.python/py-value.exp: greater than, None
PASS: gdb.python/py-value.exp: greater or equal, equal
PASS: gdb.python/py-value.exp: greater or equal, less
PASS: gdb.python/py-value.exp: greater or equal, greater
PASS: gdb.python/py-value.exp: greater or equal, None
PASS: gdb.python/py-value.exp: py-value in file.filename
PASS: gdb.python/py-value.exp: python print (gdb.objfiles()[0].pretty_printers)
PASS: gdb.python/py-value.exp: python gdb.objfiles()[0].pretty_printers = 0
PASS: gdb.python/py-value.exp: parse_and_eval constant test
PASS: gdb.python/py-value.exp: parse_and_eval simple expression test
PASS: gdb.python/py-value.exp: parse_and_eval type test
PASS: gdb.python/py-value.exp: Simple Python value dictionary - python
PASS: gdb.python/py-value.exp: Simple Python value dictionary - one = gdb.Value(1)
PASS: gdb.python/py-value.exp: Simple Python value dictionary - two = gdb.Value(2)
PASS: gdb.python/py-value.exp: Simple Python value dictionary - three = gdb.Value(3)
PASS: gdb.python/py-value.exp: Simple Python value dictionary - vdict = {one:"one str",two:"two str",three:"three str"}
PASS: gdb.python/py-value.exp: Simple Python value dictionary - end
PASS: gdb.python/py-value.exp: Test dictionary hash
PASS: gdb.python/py-value.exp: Test dictionary hash
PASS: gdb.python/py-value.exp: Test dictionary hash
PASS: gdb.python/py-value.exp: Test inbuilt hash
PASS: gdb.python/py-value.exp: continue to breakpoint: break to inspect struct and union
PASS: gdb.python/py-value.exp: get value from history
PASS: gdb.python/py-value.exp: access element inside struct using 8-bit string name
PASS: gdb.python/py-value.exp: access element inside struct using unicode name
PASS: gdb.python/py-value.exp: dereference value
PASS: gdb.python/py-value.exp: verify dereferenced value
PASS: gdb.python/py-value.exp: Test is_optimized_out attribute
PASS: gdb.python/py-value.exp: Test address attribute
PASS: gdb.python/py-value.exp: parse_and_eval with memory error
PASS: gdb.python/py-value.exp: python inval = gdb.parse_and_eval('*(int*)0')
PASS: gdb.python/py-value.exp: python print (inval.is_lazy)
PASS: gdb.python/py-value.exp: memory error and lazy values
PASS: gdb.python/py-value.exp: memory error and lazy values
PASS: gdb.python/py-value.exp: python argc_lazy = gdb.parse_and_eval('argc')
PASS: gdb.python/py-value.exp: python argc_notlazy = gdb.parse_and_eval('argc')
PASS: gdb.python/py-value.exp: python argc_notlazy.fetch_lazy()
PASS: gdb.python/py-value.exp: python print (argc_lazy.is_lazy)
PASS: gdb.python/py-value.exp: python print (argc_notlazy.is_lazy)
PASS: gdb.python/py-value.exp: sanity check argc
PASS: gdb.python/py-value.exp: python print (argc_lazy.is_lazy)
PASS: gdb.python/py-value.exp: set argc=2
PASS: gdb.python/py-value.exp: python print (argc_notlazy)
PASS: gdb.python/py-value.exp: python print (argc_lazy)
PASS: gdb.python/py-value.exp: python print (argc_lazy.is_lazy)
PASS: gdb.python/py-value.exp: print st
PASS: gdb.python/py-value.exp: get value from history
PASS: gdb.python/py-value.exp: Test string with no length
PASS: gdb.python/py-value.exp: Test string (length = -1) is all of the string
PASS: gdb.python/py-value.exp: python print (st.string (length = 6))
PASS: gdb.python/py-value.exp: Test string (length = 0) is empty
PASS: gdb.python/py-value.exp: Test length is 0
PASS: gdb.python/py-value.exp: print nullst
PASS: gdb.python/py-value.exp: get value from history
PASS: gdb.python/py-value.exp: Test string to first null
PASS: gdb.python/py-value.exp: get string beyond null
PASS: gdb.python/py-value.exp: python print (repr(nullst))
PASS: gdb.python/py-value.exp: p/x fp1
PASS: gdb.python/py-value.exp: get value from history
PASS: gdb.python/py-value.exp: python fp1 = fp1.dereference()
PASS: gdb.python/py-value.exp: python result = fp1()
PASS: gdb.python/py-value.exp: python print (result)
PASS: gdb.python/py-value.exp: p/x fp2
PASS: gdb.python/py-value.exp: get value from history
PASS: gdb.python/py-value.exp: python fp2 = fp2.dereference()
PASS: gdb.python/py-value.exp: python result2 = fp2(10,20)
PASS: gdb.python/py-value.exp: python print (result2)
PASS: gdb.python/py-value.exp: p i
PASS: gdb.python/py-value.exp: get value from history
PASS: gdb.python/py-value.exp: python result3 = i()
PASS: gdb.python/py-value.exp: p/x fp2
PASS: gdb.python/py-value.exp: get value from history
PASS: gdb.python/py-value.exp: python fp3 = fp3.dereference()
PASS: gdb.python/py-value.exp: python result2 = fp3(10)
PASS: gdb.python/py-value.exp: print sptr
PASS: gdb.python/py-value.exp: Get value from history
PASS: gdb.python/py-value.exp: Aquire lazy string
PASS: gdb.python/py-value.exp: Test type name equality
PASS: gdb.python/py-value.exp: Test type name equality
PASS: gdb.python/py-value.exp: print sn
PASS: gdb.python/py-value.exp: Get value from history
PASS: gdb.python/py-value.exp: Test lazy string
PASS: gdb.python/py-value.exp: Succesfully create a lazy string
PASS: gdb.python/py-value.exp: Test lazy string length
PASS: gdb.python/py-value.exp: Test lazy string address
PASS: gdb.python/py-value.exp: create PTR type
PASS: gdb.python/py-value.exp: kill the inferior
PASS: gdb.python/py-value.exp: Discard the symbols
PASS: gdb.python/py-value.exp: cast arg0 to PTR
PASS: gdb.python/py-value.exp: delete PTR type
PASS: gdb.python/py-value.exp: print value's type
PASS: gdb.python/py-value.exp: continue to breakpoint: break to inspect struct and union
PASS: gdb.python/py-value.exp: Create a value for subscript test
PASS: gdb.python/py-value.exp: Create a value for subscript test
PASS: gdb.python/py-value.exp: Baseline print of a Python value
PASS: gdb.python/py-value.exp: Attempt to access an integer with a subscript
PASS: gdb.python/py-value.exp: Baseline print of a Python value
PASS: gdb.python/py-value.exp: Attempt to access a string with a subscript
PASS: gdb.python/py-value.exp: Build pointer to array
PASS: gdb.python/py-value.exp:
PASS: gdb.python/py-value.exp: Access array via pointer with int subscript
PASS: gdb.python/py-value.exp: Access array via pointer with value subscript
PASS: gdb.python/py-value.exp: Attempt to access an integer with a subscript
PASS: gdb.python/py-value.exp: Build array
PASS: gdb.python/py-value.exp:
PASS: gdb.python/py-value.exp: Test multiple subscript
PASS: gdb.python/py-value.exp: continue to breakpoint: break to inspect pointer by reference
PASS: gdb.python/py-value.exp: Obtain address
PASS: gdb.python/py-value.exp: Obtains value from GDB
PASS: gdb.python/py-value.exp: Check pointer passed as reference
PASS: gdb.python/py-value.exp: python print (bool(gdb.parse_and_eval('base').dynamic_cast(gdb.lookup_type('Derived').pointer())))
PASS: gdb.python/py-value.exp: python print (gdb.parse_and_eval('base').dynamic_type)
PASS: gdb.python/py-value.exp: python print (gdb.parse_and_eval('5').dynamic_type)
PASS: gdb.python/py-value.exp: continue to breakpoint: break to inspect struct and union
PASS: gdb.python/py-value.exp: Create a value for subscript test
PASS: gdb.python/py-value.exp: Create a value for subscript test
PASS: gdb.python/py-value.exp: Baseline print of a Python value
PASS: gdb.python/py-value.exp: Attempt to access an integer with a subscript
PASS: gdb.python/py-value.exp: Baseline print of a Python value
PASS: gdb.python/py-value.exp: Attempt to access a string with a subscript
PASS: gdb.python/py-value.exp: Build pointer to array
PASS: gdb.python/py-value.exp:
PASS: gdb.python/py-value.exp: Access array via pointer with int subscript
PASS: gdb.python/py-value.exp: Access array via pointer with value subscript
PASS: gdb.python/py-value.exp: Attempt to access an integer with a subscript
PASS: gdb.python/py-value.exp: Build array
PASS: gdb.python/py-value.exp:
PASS: gdb.python/py-value.exp: Test multiple subscript
Running ../../../W._C._Handy/gdb/testsuite/gdb.python/python.exp ...
PASS: gdb.python/python.exp: multi-line python command - python
PASS: gdb.python/python.exp: multi-line python command - print (23)
PASS: gdb.python/python.exp: multi-line python command - end
PASS: gdb.python/python.exp: show python command - define zzq
PASS: gdb.python/python.exp: show python command - python
PASS: gdb.python/python.exp: show python command - print (23)
PASS: gdb.python/python.exp: show python command - end
PASS: gdb.python/python.exp: show python command - end
PASS: gdb.python/python.exp: show python command - show user zzq
PASS: gdb.python/python.exp: indented multi-line python command - python
PASS: gdb.python/python.exp: indented multi-line python command - def foo ():
PASS: gdb.python/python.exp: indented multi-line python command -   print ('hello, world!')
PASS: gdb.python/python.exp: indented multi-line python command - foo ()
PASS: gdb.python/python.exp: indented multi-line python command - end
PASS: gdb.python/python.exp: source source2.py
PASS: gdb.python/python.exp: source -s source2.py
PASS: gdb.python/python.exp: python print (gdb.current_objfile())
PASS: gdb.python/python.exp: python print (gdb.objfiles())
PASS: gdb.python/python.exp: pythonX.Y/lib-dynload/*.so
PASS: gdb.python/python.exp: python x = gdb.execute('printf "%d", 23', to_string = True)
PASS: gdb.python/python.exp: python print (x)
PASS: gdb.python/python.exp: post event insertion - python
PASS: gdb.python/python.exp: post event insertion - someVal = 0
PASS: gdb.python/python.exp: post event insertion - class Foo(object):
PASS: gdb.python/python.exp: post event insertion -   def __call__(self):
PASS: gdb.python/python.exp: post event insertion -     global someVal
PASS: gdb.python/python.exp: post event insertion -     someVal += 1
PASS: gdb.python/python.exp: post event insertion - gdb.post_event(Foo())
PASS: gdb.python/python.exp: post event insertion - end
PASS: gdb.python/python.exp: test post event execution
PASS: gdb.python/python.exp: Test non callable class
PASS: gdb.python/python.exp: show height
PASS: gdb.python/python.exp: set height 10
PASS: gdb.python/python.exp: verify pagination beforehand
PASS: gdb.python/python.exp: verify pagination beforehand: q
PASS: gdb.python/python.exp: gdb.execute does not page
PASS: gdb.python/python.exp: verify pagination afterwards
PASS: gdb.python/python.exp: verify pagination afterwards: q
PASS: gdb.python/python.exp: set height 0
PASS: gdb.python/python.exp: collect help from uiout
PASS: gdb.python/python.exp: verify help to uiout
PASS: gdb.python/python.exp: Attempt to aquire thread with no inferior
PASS: gdb.python/python.exp: Ensure that no threads are returned
PASS: gdb.python/python.exp: register atexit function - python
PASS: gdb.python/python.exp: register atexit function - import atexit
PASS: gdb.python/python.exp: register atexit function - def printit(arg):
PASS: gdb.python/python.exp: register atexit function -   print (arg)
PASS: gdb.python/python.exp: register atexit function - atexit.register(printit, 'good bye world')
PASS: gdb.python/python.exp: register atexit function - end
PASS: gdb.python/python.exp: atexit handling
PASS: gdb.python/python.exp: test decode_line no source named main
PASS: gdb.python/python.exp: test decode_line current location
PASS: gdb.python/python.exp: Test decode_line current location
PASS: gdb.python/python.exp: Test decode_line expression parse
PASS: gdb.python/python.exp: Test decode_line current location
PASS: gdb.python/python.exp: Test decode_line current locationn filename
PASS: gdb.python/python.exp: Test decode_line current location line number
PASS: gdb.python/python.exp: test decode_line python.c:26
PASS: gdb.python/python.exp: Test decode_line python.c:26 length
PASS: gdb.python/python.exp: Test decode_line expression parse
PASS: gdb.python/python.exp: Test decode_line python.c:26 length
PASS: gdb.python/python.exp: Test decode_line python.c:26 filename
PASS: gdb.python/python.exp: Test decode_line python.c:26 line number
PASS: gdb.python/python.exp: test decode_line randomfunc
PASS: gdb.python/python.exp: test decode_line func1()
PASS: gdb.python/python.exp: Test decode_line func1 length
PASS: gdb.python/python.exp: Test decode_line func1 length
PASS: gdb.python/python.exp: Test decode_line func1 filename
PASS: gdb.python/python.exp: Test decode_line func1 line number
PASS: gdb.python/python.exp: test decode_line func1,func2
PASS: gdb.python/python.exp: stop at comma in linespec
PASS: gdb.python/python.exp: Test stderr location
PASS: gdb.python/python.exp: Test stdout location
PASS: gdb.python/python.exp: Test default write
PASS: gdb.python/python.exp: Test stderr write
PASS: gdb.python/python.exp: Test stdout write
PASS: gdb.python/python.exp: Test stdlog write
PASS: gdb.python/python.exp: Set print-stack full for prompt tests
PASS: gdb.python/python.exp: prompt substitution - python
PASS: gdb.python/python.exp: prompt substitution - someCounter = 0
PASS: gdb.python/python.exp: prompt substitution - def prompt(current):
PASS: gdb.python/python.exp: prompt substitution -    global someCounter
PASS: gdb.python/python.exp: prompt substitution -    if (current == "testfake "):
PASS: gdb.python/python.exp: prompt substitution -       return None
PASS: gdb.python/python.exp: prompt substitution -    someCounter = someCounter + 1
PASS: gdb.python/python.exp: prompt substitution -    return "py prompt " + str (someCounter) + " "
PASS: gdb.python/python.exp: prompt substitution - end
PASS: gdb.python/python.exp: prompt substitution readline - python
PASS: gdb.python/python.exp: prompt substitution readline - pCounter = 0
PASS: gdb.python/python.exp: prompt substitution readline - def program_prompt(current):
PASS: gdb.python/python.exp: prompt substitution readline -    global pCounter
PASS: gdb.python/python.exp: prompt substitution readline -    if (current == ">"):
PASS: gdb.python/python.exp: prompt substitution readline -       pCounter = pCounter + 1
PASS: gdb.python/python.exp: prompt substitution readline -       return "python line " + str (pCounter) + ": "
PASS: gdb.python/python.exp: prompt substitution readline -    return None
PASS: gdb.python/python.exp: prompt substitution readline - end
PASS: gdb.python/python.exp: set hook
PASS: gdb.python/python.exp: set prompt testfake
PASS: gdb.python/python.exp: show prompt shows guarded prompt
PASS: gdb.python/python.exp: set prompt blah overriden
PASS: gdb.python/python.exp: Delete old hook
PASS: gdb.python/python.exp: set default prompt
PASS: gdb.python/python.exp: set programming hook
PASS: gdb.python/python.exp: readline secondary are not substituted
PASS: gdb.python/python.exp: end programming
PASS: gdb.python/python.exp: prompt substitution readline - python
PASS: gdb.python/python.exp: prompt substitution readline - import gdb.command.prompt
PASS: gdb.python/python.exp: prompt substitution readline - end
PASS: gdb.python/python.exp: set basic extended prompt
PASS: gdb.python/python.exp: set extended prompt working directory
PASS: gdb.python/python.exp: set extended prompt parameter
PASS: gdb.python/python.exp: Test print-stack show setting. Default is message.
PASS: gdb.python/python.exp: Test print-stack set setting to full
PASS: gdb.python/python.exp: Test print-stack show setting to full
PASS: gdb.python/python.exp: Test print-stack set setting to none
PASS: gdb.python/python.exp: Test print-stack show setting to none
PASS: gdb.python/python.exp: Test print-stack set setting to message
PASS: gdb.python/python.exp: prompt substitution readline - python
PASS: gdb.python/python.exp: prompt substitution readline - pCounter = 0
PASS: gdb.python/python.exp: prompt substitution readline - def error_prompt(current):
PASS: gdb.python/python.exp: prompt substitution readline -    raise RuntimeError("Python exception called")
PASS: gdb.python/python.exp: prompt substitution readline - end
PASS: gdb.python/python.exp: set hook
PASS: gdb.python/python.exp: set the hook to default
PASS: gdb.python/python.exp: set print-stack full for prompt error test
PASS: gdb.python/python.exp: set hook
PASS: gdb.python/python.exp: set the hook to default
PASS: gdb.python/python.exp: Get line number of func2 call site
PASS: gdb.python/python.exp: Test find_pc_line at func2 call site
PASS: gdb.python/python.exp: Step into func2
PASS: gdb.python/python.exp: Step out of func2
PASS: gdb.python/python.exp: Test find_pc_line with resume address

		=== gdb Summary ===

# of expected passes		1651
[...]/tschwinge/W._C._Handy.build/gdb/testsuite/../../gdb/gdb version  7.6.50.20131021-cvs -nw -nx -data-directory [...]/tschwinge/W._C._Handy.build/gdb/testsuite/../data-directory 

