[[!meta copyright="Copyright Â© 2007, 2008, 2010, 2011, 2012 Free Software
Foundation, Inc."]]

[[!meta license="""[[!toggle id="license" text="GFDL 1.2+"]][[!toggleable
id="license" text="Permission is granted to copy, distribute and/or modify this
document under the terms of the GNU Free Documentation License, Version 1.2 or
any later version published by the Free Software Foundation; with no Invariant
Sections, no Front-Cover Texts, and no Back-Cover Texts.  A copy of the license
is included in the section entitled [[GNU Free Documentation
License|/fdl]]."]]"""]]

[[!tag open_issue_gdb]]

Here's what's to be done for maintaining GNU GDB.

[[!toc levels=2]]


# [[General information|/gdb]]


# [[Sources|source_repositories/gdb]]


# Configuration

<!--

git checkout reviewed
git log --reverse --topo-order --pretty=fuller --stat=$COLUMNS,$COLUMNS -w -p -C --cc ..sourceware/master
-i
/^commit |^Merge:|^---$|hurd|linux|nacl|nptl|glibc|gs:|gnu-nat|i386gnu

-->

Last reviewed up to the [[Git mirror's 7a63e9515491f21eaf07301df87d389def20e317
(2012-04-01) sources|source_repositories/gdb]].

  * Globally

      * a.out, COFF, PE image support and 64 bit support are not interesting.

      * In the testsuites, `.exp` and `.d` files very likely should not only
        care for `*-*-linux*`, but also `*-*-gnu*`.  (If the need to be
        conditionalized like this at all.)

  * `bfd/`

    See [[binutils]].

  * `libdecnumber/`

    Should/can probably align to GNU/Linux.

  * Have a look at config/i386/i386gnu.mh.

  * configure.tgt

      * glibc-tdep et al. also for GNU/Hurd?

  * [[gdbserver]]


# Build

Here's a log of a GDB build run; this is from our [[Git
repository|source_repositories/gdb]]'s `tschwinge/Ferry_Tagscherer` branch,
commit 7a63e9515491f21eaf07301df87d389def20e317 (2012-04-01), run on
kepler.SCHWINGE and coulomb.SCHWINGE.

    $ export LC_ALL=C
    $ ../Ferry_Tagscherer/configure --prefix="$PWD".install SHELL=/bin/dash CC=gcc-4.6 CXX=g++-4.6 --disable-werror 2>&1 | tee log_build
    [...]
    $ make 2>&1 | tee log_build_
    [...]

Different hosts may default to different shells and compiler versions; thus
harmonized.

There are several occurences of *error: dereferencing type-punned pointer will
break strict-aliasing rules* in the MIG-generated stub files; thus no `-Werror`
until that is resolved ([[strict_aliasing]]).

This takes up around 210 MiB and needs roughly 6 min on kepler.SCHWINGE and 25
min on coulomb.SCHWINGE.

<!--

    $ (make && touch .go-install) 2>&1 | tee log_build_ && test -f .go-install && (make install && touch .go-test) 2>&1 | tee log_install && test -f .go-test && make -k check 2>&1 | tee log_test

-->


## Analysis

x86 GNU/Linux' and GNU/Hurd's configurations are slightly different, thus mask
out most of the differences that are due to GNU/Linux supporting more core file
formats and more emulation vectors.

    $ toolchain/logs/process gdb build

  * DFP

        -checking for decimal floating point... bid
        +checking for decimal floating point... configure: WARNING: decimal float is not supported for this target, ignored
        +dpd

    Have to sync libdecnumber?

  * Why do we specify `-D_GNU_SOURCE`, and GNU/Linux doesn't?

  * GNU/Linux: `gdb/symfile-mem.c` for vDSO.

  * GNU/Linux: `gdb/i386-nat.c` for hardware breakpoints, etc. -- we should
    probably use that, too.  Related to Samuel's Hurd GDB patch?

  * `gdb/gnu-nat.c`

        gnu-nat.c: In function 'proc_set_exception_port':
        gnu-nat.c:409:3: warning: format '%d' expects argument of type 'int', but argument 8 has type 'mach_port_t' [-Wformat]
        gnu-nat.c: In function 'proc_steal_exc_port':
        gnu-nat.c:449:7: warning: format '%d' expects argument of type 'int', but argument 8 has type 'mach_port_t' [-Wformat]
        gnu-nat.c:470:7: warning: format '%d' expects argument of type 'int', but argument 8 has type 'mach_port_t' [-Wformat]
        gnu-nat.c: In function 'make_proc':
        gnu-nat.c:583:7: warning: format '%d' expects argument of type 'int', but argument 2 has type 'mach_port_t' [-Wformat]
        gnu-nat.c:586:7: warning: format '%d' expects argument of type 'int', but argument 8 has type 'mach_port_t' [-Wformat]
        gnu-nat.c: In function 'inf_set_pid':
        gnu-nat.c:761:3: warning: format '%d' expects argument of type 'int', but argument 7 has type 'task_t' [-Wformat]
        gnu-nat.c: In function 'inf_validate_procs':
        gnu-nat.c:1085:6: warning: format '%d' expects argument of type 'int', but argument 8 has type 'thread_t' [-Wformat]
        gnu-nat.c: In function 'inf_signal':
        gnu-nat.c:1349:4: warning: format '%d' expects argument of type 'int', but argument 7 has type 'thread_t' [-Wformat]
        gnu-nat.c:1349:4: warning: format '%d' expects argument of type 'int', but argument 8 has type 'thread_t' [-Wformat]
        gnu-nat.c: In function 'S_exception_raise_request':
        gnu-nat.c:1668:3: warning: format '%d' expects argument of type 'int', but argument 7 has type 'thread_t' [-Wformat]
        gnu-nat.c:1668:3: warning: format '%d' expects argument of type 'int', but argument 8 has type 'task_t' [-Wformat]
        gnu-nat.c:1705:8: warning: format '%d' expects argument of type 'int', but argument 7 has type 'mach_port_t' [-Wformat]
        gnu-nat.c:1711:8: warning: format '%d' expects argument of type 'int', but argument 7 has type 'mach_port_t' [-Wformat]
        gnu-nat.c: In function 'do_mach_notify_dead_name':
        gnu-nat.c:1762:3: warning: format '%d' expects argument of type 'int', but argument 7 has type 'mach_port_t' [-Wformat]
        gnu-nat.c: In function 'gnu_write_inferior':
        gnu-nat.c:2383:8: warning: format '%x' expects argument of type 'unsigned int', but argument 2 has type 'vm_address_t' [-Wformat]
        gnu-nat.c:2393:8: warning: format '%x' expects argument of type 'unsigned int', but argument 2 has type 'vm_address_t' [-Wformat]
        gnu-nat.c: In function 'steal_exc_port':
        gnu-nat.c:2864:5: warning: format '%d' expects argument of type 'int', but argument 2 has type 'mach_port_t' [-Wformat]

    
  * fe19822761b4635f392875a186e48af446b40f41..7a63e9515491f21eaf07301df87d389def20e317):

    `-Wmissing-prototypes`

        gnu-nat.c: At top level:
        gnu-nat.c:643:1: warning: no previous prototype for 'make_inf' []
        gnu-nat.c: At top level:
        gnu-nat.c:879:1: warning: no previous prototype for 'inf_set_traced' []
        gnu-nat.c:980:1: warning: no previous prototype for 'inf_port_to_thread' []
        gnu-nat.c: At top level:
        gnu-nat.c:1748:1: warning: no previous prototype for 'inf_task_died_status' []
        gnu-nat.c: At top level:
        gnu-nat.c:2273:1: warning: no previous prototype for 'gnu_read_inferior' []
        gnu-nat.c:2319:1: warning: no previous prototype for 'gnu_write_inferior' []
        gnu-nat.c: At top level:
        gnu-nat.c:3415:1: warning: no previous prototype for '_initialize_gnu_nat' []
        notify_S.c:305:24: warning: no previous prototype for 'notify_server' []
        notify_S.c:341:28: warning: no previous prototype for 'notify_server_routine' []
        process_reply_S.c:343:24: warning: no previous prototype for 'process_reply_server' []
        process_reply_S.c:379:28: warning: no previous prototype for 'process_reply_server_routine' []
        msg_reply_S.c:165:24: warning: no previous prototype for 'msg_reply_server' []
        msg_reply_S.c:201:28: warning: no previous prototype for 'msg_reply_server_routine' []
        exc_request_S.c:157:24: warning: no previous prototype for 'exc_server' []
        exc_request_S.c:193:28: warning: no previous prototype for 'exc_server_routine' []

  * Why does GNU/Linux have an additional `-ldl -rdynamic` when linking `gdb`?


# Install

    $ make install 2>&1 | tee log_install
    [...]

This takes up around 50 MiB, and needs roughly 1 min on kepler.SCHWINGE and 3
min on coulomb.SCHWINGE.


## Analysis

    $ toolchain/logs/process gdb install

  * `libtool: finish`: `ldconfig` is not run for the Hurd.


# Testsuite

    $ make -k check
    [...]

This needs roughly 11 min on kepler.SCHWINGE and 128 min on coulomb.SCHWINGE.

When running `make -k check 2>&1 | tee log_test`, at the end of the testsuite
the `tee` process does not terminate if there are still stray leftover
processes that [have their stdout/stderr
open](http://sourceware.org/ml/gdb-patches/2012-10/msg00489.html).  `kill`ing
these (`SIGKILL` may be needed), makes the `tee` process terminate, too.  On
GNU/Hurd, this has be seen for `gdb.base/structs-tf-td`,
`gdb.cp/meth-typedefs`, and an unknown (`?`) one ("57 PIDs before" `expect
[...] gdb.cp`).


## Analysis

    $ toolchain/logs/process gdb test

  * Disabled

      * `gdb.base/morestack.exp`

        TODO `-fsplit-stack` issue.

      * `gdb.base/readline.exp`

        [[term_blocking]] issue.

      * `gdb.base/sigall.exp`

        From `send signal TSTP` on, all FAIL running into timeouts.

  * `UNSUPPORTED: gdb.threads/ia64-sigill.exp: Couldn't compile ../../../master/gdb/testsuite/gdb.threads/ia64-sigill.c: unrecognized error`

        ../../../master/gdb/testsuite/gdb.threads/ia64-sigill.c:29:24: fatal error: asm/unistd.h: No such file or directory

  * `UNSUPPORTED: gdb.threads/multi-create.exp: Couldn't compile ../../../master/gdb/testsuite/gdb.threads/multi-create.c: unrecognized error`
        ../../../master/gdb/testsuite/gdb.threads/multi-create.c: In function 'create_function':
        ../../../master/gdb/testsuite/gdb.threads/multi-create.c:46:39: error: 'PTHREAD_STACK_MIN' undeclared (first use in this function)
        ../../../master/gdb/testsuite/gdb.threads/multi-create.c:46:39: note: each undeclared identifier is reported only once for each function it appears in
        ../../../master/gdb/testsuite/gdb.threads/multi-create.c: In function 'main':
        ../../../master/gdb/testsuite/gdb.threads/multi-create.c:73:39: error: 'PTHREAD_STACK_MIN' undeclared (first use in this function)

  * `UNSUPPORTED: gdb.threads/staticthreads.exp: Couldn't compile ../../../master/gdb/testsuite/gdb.threads/staticthreads.c: unrecognized error`

        ../../../master/gdb/testsuite/gdb.threads/staticthreads.c: In function 'main':
        ../../../master/gdb/testsuite/gdb.threads/staticthreads.c:52:37: error: 'PTHREAD_STACK_MIN' undeclared (first use in this function)
        ../../../master/gdb/testsuite/gdb.threads/staticthreads.c:52:37: note: each undeclared identifier is reported only once for each function it appears in

  * `UNSUPPORTED: gdb.threads/watchpoint-fork.exp: parent: multithreaded: Couldn't compile ../../../Ferry_Tagscherer/gdb/testsuite/gdb.threads/watchpoint-fork-mt.c ../../../Ferry_Tagscherer/gdb/testsuite/gdb.threads/watchpoint-fork-parent.c: unrecognized error`

        ../../../Ferry_Tagscherer/gdb/testsuite/gdb.threads/watchpoint-fork-mt.c:29:24: fatal error: asm/unistd.h: No such file or directory

  * fe19822761b4635f392875a186e48af446b40f41..7a63e9515491f21eaf07301df87d389def20e317):

        -PASS: gdb.base/break.exp: until bp_location1
        -PASS: gdb.base/break.exp: break on default location, 1st time
        -PASS: gdb.base/break.exp: break on default location, 2nd time
        -PASS: gdb.base/break.exp: break on default location, 3rd time
        -PASS: gdb.base/break.exp: break on default location, 4th time
        -PASS: gdb.base/break.exp: set to-be-silent break bp_location1
        -PASS: gdb.base/break.exp: set silent break bp_location1
        -PASS: gdb.base/break.exp: info silent break bp_location1
        -PASS: gdb.base/break.exp: hit silent break bp_location1
        -PASS: gdb.base/break.exp: stopped for silent break bp_location1
        -PASS: gdb.base/break.exp: thread-specific breakpoint on non-existent thread disallowed
        -PASS: gdb.base/break.exp: thread-specific breakpoint on bogus thread ID disallowed
        -PASS: gdb.base/break.exp: breakpoint with trailing garbage disallowed
        -PASS: gdb.base/break.exp: step over breakpoint
        -PASS: gdb.base/break.exp: clear line has no breakpoint disallowed
        -PASS: gdb.base/break.exp: clear current line has no breakpoint disallowed
        -PASS: gdb.base/break.exp: break marker3 #1
        -PASS: gdb.base/break.exp: break marker3 #2
        -PASS: gdb.base/break.exp: clear marker3
        -PASS: gdb.base/break.exp: set convenience variable $foo to bp_location11
        -PASS: gdb.base/break.exp: set breakpoint via convenience variable
        -PASS: gdb.base/break.exp: set convenience variable $foo to 81.5
        -PASS: gdb.base/break.exp: set breakpoint via non-integer convenience variable disallowed
        -PASS: gdb.base/break.exp: set breakpoint on to-be-called function
        -PASS: gdb.base/break.exp: hit breakpoint on called function
        -PASS: gdb.base/break.exp: backtrace while in called function
        -PASS: gdb.base/break.exp: finish from called function
        -PASS: gdb.base/break.exp: finish with arguments disallowed
        -PASS: gdb.base/break.exp: finish from outermost frame disallowed
        -PASS: gdb.base/break.exp: kill program
        -PASS: gdb.base/break.exp: break at factorial
        -PASS: gdb.base/break.exp: continue to factorial(5)
        -PASS: gdb.base/break.exp: backtrace from factorial(5)
        -PASS: gdb.base/break.exp: next to recursive call
        -PASS: gdb.base/break.exp: next over recursive call
        -PASS: gdb.base/break.exp: backtrace from factorial(5.1)
        -PASS: gdb.base/break.exp: continue until exit at recursive next test
        +FAIL: gdb.base/break.exp: until bp_location1 (timeout)
        +FAIL: gdb.base/break.exp: break on default location, 1st time (timeout)
        +FAIL: gdb.base/break.exp: break on default location, 2nd time (timeout)
        +FAIL: gdb.base/break.exp: break on default location, 3rd time (timeout)
        +FAIL: gdb.base/break.exp: break on default location, 4th time (timeout)
        +ERROR: Delete all breakpoints in delete_breakpoints (timeout)
        +UNRESOLVED: gdb.base/break.exp: setting breakpoint at main (timeout)
        +FAIL: gdb.base/break.exp: break tests suppressed
        +FAIL: gdb.base/break.exp: set to-be-silent break bp_location1 (timeout)
        +FAIL: gdb.base/break.exp: set silent break bp_location1 (timeout)
        +FAIL: gdb.base/break.exp: info silent break bp_location1 (timeout)
        +FAIL: gdb.base/break.exp: hit silent break bp_location1 (timeout)
        +FAIL: gdb.base/break.exp: stopped for silent break bp_location1 (timeout)
        +FAIL: gdb.base/break.exp: thread-specific breakpoint on non-existent thread disallowed (timeout)
        +FAIL: gdb.base/break.exp: thread-specific breakpoint on bogus thread ID disallowed (timeout)
        +FAIL: gdb.base/break.exp: breakpoint with trailing garbage disallowed (timeout)
        +FAIL: gdb.base/break.exp: step over breakpoint (timeout)
        +FAIL: gdb.base/break.exp: clear line has no breakpoint disallowed (timeout)
        +FAIL: gdb.base/break.exp: clear current line has no breakpoint disallowed (timeout)
        +FAIL: gdb.base/break.exp: break marker3 #1 (timeout)
        +FAIL: gdb.base/break.exp: break marker3 #2 (timeout)
        +FAIL: gdb.base/break.exp: clear marker3 (timeout)
        +FAIL: gdb.base/break.exp: set convenience variable $foo to bp_location11 (timeout)
        +FAIL: gdb.base/break.exp: set breakpoint via convenience variable (timeout)
        +FAIL: gdb.base/break.exp: set convenience variable $foo to 81.5 (timeout)
        +FAIL: gdb.base/break.exp: set breakpoint via non-integer convenience variable disallowed (timeout)
        +FAIL: gdb.base/break.exp: set breakpoint on to-be-called function (timeout)
        +FAIL: gdb.base/break.exp: hit breakpoint on called function (timeout)
        +FAIL: gdb.base/break.exp: backtrace while in called function (timeout)
        +FAIL: gdb.base/break.exp: finish from called function (timeout)
        +ERROR: Delete all breakpoints in delete_breakpoints (timeout)
        +UNRESOLVED: gdb.base/break.exp: setting breakpoint at main (timeout)
        +FAIL: gdb.base/break.exp: break tests suppressed
        +FAIL: gdb.base/break.exp: (timeout) finish with arguments disallowed
        +FAIL: gdb.base/break.exp: finish from outermost frame disallowed (timeout)
        +FAIL: gdb.base/break.exp: kill program (timeout)
        +ERROR: Delete all breakpoints in delete_breakpoints (timeout)
        +UNRESOLVED: gdb.base/break.exp: break at factorial (timeout)
        +FAIL: gdb.base/break.exp: run to factorial(6) (timeout)
        +FAIL: gdb.base/break.exp: continue to factorial(5) (timeout)
        +FAIL: gdb.base/break.exp: backtrace from factorial(5) (timeout)
        +FAIL: gdb.base/break.exp: next to recursive call (timeout)
        +ERROR: Delete all breakpoints in delete_breakpoints (timeout)
        +UNRESOLVED: gdb.base/break.exp: next over recursive call (timeout)
        +FAIL: gdb.base/break.exp: backtrace from factorial(5.1) (timeout)
        +FAIL: gdb.base/break.exp: continue until exit at recursive next test (timeout)

        -PASS: gdb.base/sepdebug.exp: until bp_location1
        -PASS: gdb.base/sepdebug.exp: break on default location, 1st time
        -PASS: gdb.base/sepdebug.exp: break on default location, 2nd time
        -PASS: gdb.base/sepdebug.exp: break on default location, 3rd time
        -PASS: gdb.base/sepdebug.exp: break on default location, 4th time
        -PASS: gdb.base/sepdebug.exp: set to-be-silent break bp_location1
        -PASS: gdb.base/sepdebug.exp: set silent break bp_location1
        -PASS: gdb.base/sepdebug.exp: info silent break bp_location1
        -PASS: gdb.base/sepdebug.exp: hit silent break bp_location1
        -PASS: gdb.base/sepdebug.exp: stopped for silent break bp_location1
        -PASS: gdb.base/sepdebug.exp: thread-specific breakpoint on non-existent thread disallowed
        -PASS: gdb.base/sepdebug.exp: thread-specific breakpoint on bogus thread ID disallowed
        -PASS: gdb.base/sepdebug.exp: breakpoint with trailing garbage disallowed
        -PASS: gdb.base/sepdebug.exp: step over breakpoint
        -PASS: gdb.base/sepdebug.exp: clear line has no breakpoint disallowed
        -PASS: gdb.base/sepdebug.exp: clear current line has no breakpoint disallowed
        -PASS: gdb.base/sepdebug.exp: break marker3 #1
        -PASS: gdb.base/sepdebug.exp: break marker3 #2
        -PASS: gdb.base/sepdebug.exp: clear marker3
        -PASS: gdb.base/sepdebug.exp: set convenience variable $foo to bp_location11
        -PASS: gdb.base/sepdebug.exp: set breakpoint via convenience variable
        -PASS: gdb.base/sepdebug.exp: set convenience variable $foo to 81.5
        -PASS: gdb.base/sepdebug.exp: set breakpoint via non-integer convenience variable disallowed
        -PASS: gdb.base/sepdebug.exp: set breakpoint on to-be-called function
        -PASS: gdb.base/sepdebug.exp: hit breakpoint on called function
        -PASS: gdb.base/sepdebug.exp: backtrace while in called function
        -PASS: gdb.base/sepdebug.exp: finish from called function
        -PASS: gdb.base/sepdebug.exp: finish with arguments disallowed
        -PASS: gdb.base/sepdebug.exp: finish from outermost frame disallowed
        -PASS: gdb.base/sepdebug.exp: kill program
        -PASS: gdb.base/sepdebug.exp: break at factorial
        -PASS: gdb.base/sepdebug.exp: continue to factorial(5)
        -PASS: gdb.base/sepdebug.exp: backtrace from factorial(5)
        -PASS: gdb.base/sepdebug.exp: next to recursive call
        -PASS: gdb.base/sepdebug.exp: next over recursive call
        -PASS: gdb.base/sepdebug.exp: backtrace from factorial(5.1)
        -PASS: gdb.base/sepdebug.exp: continue until exit at recursive next test
        +FAIL: gdb.base/sepdebug.exp: until bp_location1 (timeout)
        +FAIL: gdb.base/sepdebug.exp: break on default location, 1st time (timeout)
        +FAIL: gdb.base/sepdebug.exp: break on default location, 2nd time (timeout)
        +FAIL: gdb.base/sepdebug.exp: break on default location, 3rd time (timeout)
        +FAIL: gdb.base/sepdebug.exp: break on default location, 4th time (timeout)
        +ERROR: Delete all breakpoints in delete_breakpoints (timeout)
        +UNRESOLVED: gdb.base/sepdebug.exp: setting breakpoint at main (timeout)
        +FAIL: gdb.base/sepdebug.exp: sepdebug tests suppressed
        +FAIL: gdb.base/sepdebug.exp: set to-be-silent break bp_location1 (timeout)
        +FAIL: gdb.base/sepdebug.exp: set silent break bp_location1 (timeout)
        +FAIL: gdb.base/sepdebug.exp: info silent break bp_location1 (timeout)
        +FAIL: gdb.base/sepdebug.exp: hit silent break bp_location1 (timeout)
        +FAIL: gdb.base/sepdebug.exp: stopped for silent break bp_location1 (timeout)
        +FAIL: gdb.base/sepdebug.exp: thread-specific breakpoint on non-existent thread disallowed (timeout)
        +FAIL: gdb.base/sepdebug.exp: thread-specific breakpoint on bogus thread ID disallowed (timeout)
        +FAIL: gdb.base/sepdebug.exp: breakpoint with trailing garbage disallowed (timeout)
        +FAIL: gdb.base/sepdebug.exp: step over breakpoint (timeout)
        +FAIL: gdb.base/sepdebug.exp: clear line has no breakpoint disallowed (timeout)
        +FAIL: gdb.base/sepdebug.exp: clear current line has no breakpoint disallowed (timeout)
        +FAIL: gdb.base/sepdebug.exp: break marker3 #1 (timeout)
        +FAIL: gdb.base/sepdebug.exp: break marker3 #2 (timeout)
        +FAIL: gdb.base/sepdebug.exp: clear marker3 (timeout)
        +FAIL: gdb.base/sepdebug.exp: set convenience variable $foo to bp_location11 (timeout)
        +FAIL: gdb.base/sepdebug.exp: set breakpoint via convenience variable (timeout)
        +FAIL: gdb.base/sepdebug.exp: set convenience variable $foo to 81.5 (timeout)
        +FAIL: gdb.base/sepdebug.exp: set breakpoint via non-integer convenience variable disallowed (timeout)
        +FAIL: gdb.base/sepdebug.exp: set breakpoint on to-be-called function (timeout)
        +FAIL: gdb.base/sepdebug.exp: hit breakpoint on called function (timeout)
        +FAIL: gdb.base/sepdebug.exp: backtrace while in called function (timeout)
        +FAIL: gdb.base/sepdebug.exp: finish from called function (timeout)
        +ERROR: Delete all breakpoints in delete_breakpoints (timeout)
        +UNRESOLVED: gdb.base/sepdebug.exp: setting breakpoint at main (timeout)
        +FAIL: gdb.base/sepdebug.exp: sepdebug tests suppressed
        +FAIL: gdb.base/sepdebug.exp: finish with arguments disallowed (timeout)
        +FAIL: gdb.base/sepdebug.exp: finish from outermost frame disallowed (timeout)
        +FAIL: gdb.base/sepdebug.exp: kill program (timeout)
        +ERROR: Delete all breakpoints in delete_breakpoints (timeout)
        +UNRESOLVED: gdb.base/sepdebug.exp: break at factorial (timeout)
        +FAIL: gdb.base/sepdebug.exp: run to factorial(6) (timeout)
        +FAIL: gdb.base/sepdebug.exp: continue to factorial(5) (timeout)
        +FAIL: gdb.base/sepdebug.exp: backtrace from factorial(5) (timeout)
        +FAIL: gdb.base/sepdebug.exp: next to recursive call (timeout)
        +ERROR: Delete all breakpoints in delete_breakpoints (timeout)
        +UNRESOLVED: gdb.base/sepdebug.exp: next over recursive call (timeout)
        +FAIL: gdb.base/sepdebug.exp: backtrace from factorial(5.1) (timeout)
        +FAIL: gdb.base/sepdebug.exp: continue until exit at recursive next test (timeout)

    Hopefully just transient timeouts.

TODO.
