## <a name="Table_of_Contents"> Table of Contents </a>

%TOC%

This is a brief HowTO building OSKit-Mach (a.k.a GNUmach 2.0). It covers everything from getting the latest sources of both the [OSKit](http://www.cs.utah.edu/flux/oskit/) and the GNUmach kernel. Down to building and debugging them. There is also [another guide](http://www.etherhogz.org/doc/oskit-mach.html) available.

To be able to actually make use of your recently checked out CVS version of the GNUMach kernel &amp; C:o you need a GNU system of [gnu-20020816.tar.gz](ftp://ftp.funet.fi/pub/gnu/alpha/gnu/hurd/contrib/marcus/gnu-20020816.tar.gz) or later.

## <a name="Getting_your_hands_on_the_source"> Getting your hands on the source </a>

First you need to checkout the relevant sources.

### <a name="The_OSKit"> </a> The OSKit

**_Sources:_**

* St. Patricks day 2002 release: <ftp://flux.cs.utah.edu/flux/oskit/oskit-20020317.tar.gz>

* Valentine's day 2001 release: <ftp://flux.cs.utah.edu/flux/oskit/oskit-20010214.tar.gz>

**_Patches:_**

* Useful patches are available [[Mach/UsefulOskitPatches]] or on the nearest Debian FTP.

### <a name="Accessing_the_GNU_CVS"> </a> Accessing the GNU CVS

The recommended document for accessing the Hurd CVS on Savannah is at <http://savannah.gnu.org/cvs/?group=hurd>

This is only a brief restatement, which may be inaccurate. Setup your environment with the CVSROOT variable. How you do this may differ between shells.

      CVSROOT=":pserver:anoncvs@anoncvs.gnu.org:/cvsroot/hurd"

**_Gnu Mach:_**

All development, apart from critical bug fixes, is done on the upcoming 2.0 release. Previously the oskit-branch of gnumach, now on HEAD (the default CVS tag).

      cvs -z3 co gnumach

In case you have been tracking the oskit-branch and want to move to the current HEAD branch you can issue the following instead to update your tree.

      cd <YOUR MACH DIR>
      cvs -z3 update -r HEAD -Pd

Where &lt;YOUR MACH DIR&gt; can be gnumach, oskit-mach, or similar.

**_The Hurd servers:_**

In case you want to build the Hurd servers as well, you can check them out with:

      cvs -z3 co hurd

**_Inteface generator:_**

See the [[Mig/MachInterfaceGenerator]] for more information.

Check it out using

      cvs -z3 co mig

## <a name="Building"> Building </a>

To build any Mach kernel you need an interface generator, MiG. To be on the safe side, use the CVS version. Configure and build it according to the instructions in the configure --help.

Continue below with the instructions for building the OSKit and GNUmach. The recommended versions of GCC are

<dl>
  <dt> For the OSKit</dt>
  <dd> GCC 2.95.X </dd>
  <dt> For GNUmach</dt>
  <dd> GCC 3.2 </dd>
</dl>

### <a name="The_OSKit"> </a> The OSKit

Do _not_ forget to apply all known [[Mach/UsefulOskitPatches]] before starting the build!

The attached [[ATTACHURLmodulesx86pc]], or [[ATTACHURLmodules-lightx86pc]], is an example setup, your needs may vary but this one works for standard COTS PC's. Now, how to configure and build the OSKit.

    # cd oskit-20020317/
    # mkdir build
    # cd build
    # CC=gcc-2.95                            \
      CFLAGS="-g"                            \
      ../configure --prefix=/usr/local       \
                   --enable-debug
    # make
    # sudo make install

### <a name="GNUmach_2_0_OSKit_Mach_"> </a> GNUmach 2.0 (OSKit-Mach)

Different to its half sister, the OSKit-Mach kernel does _not_ need a cross compiler. The regular gcc for your x86 Linux system does just fine. However, you might want to use gcc 3.2 with the latest and greatest CVS version of Mach.

**_Configuring:_**

    # cd oskit-mach
    # mkdir build
    # cd build
    # MIG=/usr/local/bin/mig                   \
      CC=gcc-3.2                               \
      CFLAGS="-g -O"                           \
      OSKIT_LIBDIR=/usr/local/lib/oskit        \
      ../configure --prefix=/gnu

**_Building:_**

Instead of using `make kernel` to build kernel, in OSKit-Mach you have to use <code>make kernel-<var>DRIVERS</var></code>, where <var>DRIVERS</var> is <code><var>DRIVER</var>+<var>DRIVER</var>+...+<var>DRIVER</var></code> (a list of drivers separated by `+`). <var>DRIVER</var> can be one of:

* `ide`
* `floppy`
* <code>ethernet\_<var>ETHDRV</var></code> where <var>ETHDRV</var> is taken from `oskit/oskit/dev/linux_ethernet.h`.
* <code>scsi\_<var>SCSIDRV</var></code> where <var>SCSIDRV</var> is taken from `oskit/oskit/dev/linux_scsi.h`.

Thus, to build a IDE capable kernel with 3Com Vortex Boomerang support you use the following:

    # make kernel-ide+ethernet_vortex
    # sudo make install
    # sudo gzip -f /gnu/boot/oskit-mach

If you want to use tftp to download the kernel from Grub and don't care about the symbols I recommend either stripping or removing the `--enable-debug` and `-g` statements.

## <a name="Debugging"> Debugging </a>

See the [[Mach/RemoteDebugOskitMach]] page.

## <a name="Attachments"> Attachments </a>

* [[ATTACHURLmodulesx86pc]]: Modules to build in OSKit
* [[ATTACHURLmodules-lightx86pc]]: Lighter version of required modules for building GNUmach

----

## <a name="Comments_"> Comments: </a>

_I think this is a bug that you have to specify $prefix/lib/oskit as OSKIT\_LIBDIR when configuring oskit-mach. Libdir is usually just $prefix/lib._ -- [[Main/MichalSuchanek]]

_I think not. The $prefix variable in autoconf comes from the --prefix option to configure, that in turn is intended as the prefix path to the installation of the package you are configuring, i.e. oskit-mach and **NOT** the OSKit itself_ -- [[Main/JoachimNilsson]]

_I refer to the $prefix value at the time oskit is built. Of course, you can choose a different prefix for oskit-mach._ -- [[Main/MichalSuchanek]]

_I see, it was not that clear the context of your first comment, well anyhow when reality changes so will this page. :)\__ -- [[Main/JoachimNilsson]]

----

## <a name="Blame_annotations_"> Blame annotations: </a>

 First version. -- [[Main/JoachimNilsson]] - 14 May 2002

Updated by: -- [[Main/LuisBustamante]] - 04 Jun 2002

Moving from oskit-branch to HEAD. -- [[Main/JoachimNilsson]] - 05 Jun 2002
