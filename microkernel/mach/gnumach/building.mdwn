# Building [[GNU_Mach|gnumach]] from Source

If you want to build the [[GNU_Mach|gnumach]] kernel yourself instead of just using a
pre-built binary, follow these instructions.

The unpacked source tree is around 20 MiB, and the build tree (with all drivers
enabled) is around 50 MiB.

## Getting the Source Code

You can either use the git repository (see <http://git.savannah.gnu.org/cgit/hurd/>),

    $ git clone git.savannah.gnu.org:/srv/git/hurd/gnumach.git

... or get the Debian sources, if you're using Debian. (See
[here](http://packages.debian.net/source/unstable/gnumach).)

    $ apt-get source gnumach

Please see the Debian [[running/debian/FAQ]] before using `apt-get source`.

## On Debian Systems:

### Preparing for the Build

Building GNU Mach requires the *build-essential* and *fakeroot* packages,
and some additional dependencies specified by the gnumach source package:

    # apt-get install build-essential fakeroot
    # apt-get build-dep gnumach

### Building and Installing ... Debian `.deb` files

Change into the directory with the downloaded / unpacked GNU Mach sources,

    $ cd gnumach-XXXXXXXX

Start the build process with

    $ dpkg-buildpackage -us -uc -b -rfakeroot

[[GNU_Mach|gnumach]] is now building.  To use the new kernel, you must install the
resulting `.deb` package which is located one directory above the build
directory and has a similar name as the build directory:

    # dpkg -i ../gnumach_XXXXXXXX-X_hurd-i386.deb

You can now reboot your computer and enjoy the new kernel.

## On non-Debian Systems:

### Preparing for the Build

Building GNU Mach requires a C compiler, a _static_ 32 bit standard C library,
your favourite flavor of awk (gawk) and GNU make.

First, create the configuartion files:

    $ cd gnumach
    $ autoreconf --install

GNU Mach (and the associated headers) need be built in a separate build directory:

    $ mkdir build
    $ cd build

Run configure:

    $ ../configure --prefix=

If building on a 64 bit host system,
you need a number of additional settings to force a 32 bit build:

    $ CPP='gcc -m32 -E -x c -undef -ansi' CC='gcc -m32' LD='ld -melf_i386' ../configure --prefix= --host=i686-unknown-linux-gnu

### Installing the Header Files First

In order to build GNU Mach, you will need a working MIG.
Building MIG in turn requires the GNU Mach header files to be already present.
So for bootstrapping MIG, you have to install the Mach headers first,
for example into `~/gnu/include/`:

    $ make DESTDIR=~/gnu install-data

Now you can [[build_MIG|mig/gnu_mig/building]].
Once you are done with that, come back here to finish the Mach build.

### Building and Installing

With MIG present, now build the kernel image:

    $ make gnumach.gz

Optionally run the (tiny) test suite:

    $ make check

The resulting kernel binary can now be moved into place (just copy
`gnumach.gz`, typically to `/boot/gnumach.gz`), so you can boot your system
with the new kernel. It is a good idea to make a backup of the previously
installed binary, in case you need to recover.
