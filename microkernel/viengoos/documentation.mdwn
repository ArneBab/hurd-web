[[!meta copyright="Copyright Â© 2008, 2012 Free Software Foundation, Inc."]]

[[!meta license="""[[!toggle id="license" text="GFDL 1.2+"]][[!toggleable
id="license" text="Permission is granted to copy, distribute and/or modify this
document under the terms of the GNU Free Documentation License, Version 1.2 or
any later version published by the Free Software Foundation; with no Invariant
Sections, no Front-Cover Texts, and no Back-Cover Texts.  A copy of the license
is included in the section entitled [[GNU Free Documentation
License|/fdl]]."]]"""]]

The most up-to-date documentation is in the source code itself, see in
particular the header files in the hurd directory.

There is a started but as-of-yet incomplete manual in the doc
directory, which documents the Viengoos API and the Hurd API.  A
version of that is available [[here|reference-guide.pdf]].  It is
not, however, automatically regenerated, and thus may not be up to
date.


# Academic Papers

  * [Viengoos: A Framework for Stakeholder-Directed Resource
    Allocation](http://walfield.org/papers/2009-walfield-viengoos-a-framework-for-stakeholder-directed-resource-allocation.pdf).
    By Neal H. Walfield.  Submitted to EuroSys 2009.

    General-purpose operating systems not only fail to provide adaptive
    applications the information they need to intelligently adapt, but
    also schedule resources in such a way that were applications to
    aggressively adapt, resources would be inappropriately scheduled.  The
    problem is that these systems use demand as the primary indicator of
    utility, which is a poor indicator of utility for adaptive
    applications.

    We present a resource management framework appropriate for traditional
    as well as adaptive applications.  The primary difference from current
    schedulers is the use of stakeholder preferences in addition to
    demand.  We also show how to revoke memory, compute the amount of
    memory available to each principal, and account shared
    memory.  Finally, we introduce a prototype system, Viengoos, and
    present some benchmarks that demonstrate that it can efficiently
    support multiple aggressively adaptive applications simultaneously.

  * [Improving Usability via Access Decomposition and Policy
    Refinement](http://walfield.org/papers/20070104-walfield-access-decomposition-policy-refinement.pdf).
    By Neal H. Walfield and Marcus Brinkmann.  Technical report
    (submitted to HotOS 2007).

    Commodity operating systems fail to meet the security, resource
    management and integration expectations of users.  We propose a unified
    solution based on a capability framework as it supports fine grained
    objects, straightforward access propagation and virtualizable
    interfaces and explore how to improve resource use via access
    decomposition and policy refinement with minimum interposition.  We
    argue that only a small static number of scheduling policies are
    needed in practice and advocate hierarchical policy specification and
    central realization.


# Miscellaneous

  * [[IRC_2012-02-23]]
