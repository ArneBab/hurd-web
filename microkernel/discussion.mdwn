[[!meta copyright="Copyright Â© 2011 Free Software Foundation, Inc."]]

[[!meta license="""[[!toggle id="license" text="GFDL 1.2+"]][[!toggleable
id="license" text="Permission is granted to copy, distribute and/or modify this
document under the terms of the GNU Free Documentation License, Version 1.2 or
any later version published by the Free Software Foundation; with no Invariant
Sections, no Front-Cover Texts, and no Back-Cover Texts.  A copy of the license
is included in the section entitled [[GNU Free Documentation
License|/fdl]]."]]"""]]

[[!tag open_issue_documentation]]

# IRC, freenode, #hurd, 2011-07-26

    < antrik> Tekk_`: regarding microkernels: the basic idea, and really the
      *only* fundamental difference, is that they isolate things in separate
      address spaces. everything else goes back to this.
    < antrik> benefits from the isolation generally fall into two groups: more
      robustness (main focus of Minix3), and more flexibility (main focus of
      Hurd)
    < antrik> while it might also encourage some other good design choices,
      these are secondary effects: such choices can also be implemented in a
      monolithic architecture -- and not necessarily harder. just less obvious
      in some cases...


# IRC, freenode, #hurd, 2013-08-28

    <Spyro> ok question
    <Spyro> what is the big advantage of microkernels over monolithic kernels
      as you guys see it?
    <Spyro> is it entirely for the benefit of developers or are there actaully
      practical advantages?
    <kilobug> Spyro: there are many advantages, at least in theory, in terms of
      modularity, flexibility, stability, scalability, security, ... which are
      for everyone
    <braunr> Spyro: of course some advantages are practical
    <braunr> for me, the main advantage is system extensibility
    <braunr> you can replace system services at runtime
    <braunr> and on the hurd, you can do it as an unprivileged user
    <braunr> (the direct side effect is far increased security)
    <braunr> kilobug: i don't see the scalability advantages though
    <kilobug> braunr: I would say it goes in par with the modularity, like, you
      can have a full-weight IPv4/IPv6 stack for desktop, but a minimal stack
      for embeded
    <braunr> i see
    <braunr> for me, it's in par with extensibility :)
    <braunr> i see modularity only as an implementation of extensibility
    <braunr> or a special case of it
    <braunr> Spyro: basically, it's supposed to bring the same advantages as
      fuse, but even more so (because it's not limited to file systems), and
      better (because it's normally well integrated with the core of the
      system)
    <teythoon> also, fuse is kind of bolted on and Linux composes really badly
    <teythoon> e.g. it is not possible to nfs export a fuse mounted filesystem
      on Linux
    <braunr> bolted ?
    <teythoon> isn't that the term? as in being attached using screws?
    <braunr> i'm not familiar with it :p
    <azeem> "a posteriori design"
    <teythoon> yes
    <braunr> ok
