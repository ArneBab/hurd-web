[[!meta copyright="Copyright Â© 2009, 2010, 2011 Free Software Foundation,
Inc."]]

[[!meta license="""[[!toggle id="license" text="GFDL 1.2+"]][[!toggleable
id="license" text="Permission is granted to copy, distribute and/or modify this
document under the terms of the GNU Free Documentation License, Version 1.2 or
any later version published by the Free Software Foundation; with no Invariant
Sections, no Front-Cover Texts, and no Back-Cover Texts.  A copy of the license
is included in the section entitled [[GNU Free Documentation
License|/fdl]]."]]"""]]

The [[*UNIX signalling mechanism*|unix/signal]] is implemented for the GNU Hurd
by means of a separate *[[signal_thread]]* that is part of every user-space
[[process]].  This makes handling of signals a separate thread of control.
[[GNU Mach|microkernel/mach/gnumach]] itself has no idea what a signal is and
`kill` is not a [[system_call]] (as it typically is in a [[UNIX]] system): it's
implemented in [[glibc]].

  * [[SA_SIGINFO, SA_SIGACTION|open_issues/sa_siginfo_sa_sigaction]]

  * Why does `kill` hang sometimes?

        <youpi> kill send the signal to the process
        <youpi> if the process is hung, killing waits
        <youpi> signals should be just asynchronous, but apparently for some
          reason Roland & co wanted some synchronization

    [[!taglink open_issue_glibc]]


# Further Reading

  * {{$unix#djb_self-pipe}}.

  * {{$unix#rjk_fork}}.
