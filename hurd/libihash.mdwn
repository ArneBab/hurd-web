[[!meta copyright="Copyright Â© 2009, 2010 Free Software Foundation, Inc."]]

[[!meta license="""[[!toggle id="license" text="GFDL 1.2+"]][[!toggleable
id="license" text="Permission is granted to copy, distribute and/or modify this
document under the terms of the GNU Free Documentation License, Version 1.2 or
any later version published by the Free Software Foundation; with no Invariant
Sections, no Front-Cover Texts, and no Back-Cover Texts.  A copy of the license
is included in the section entitled
[[GNU_Free_Documentation_License|/fdl]]."]]"""]]

[[!tag open_issue_hurd]]

  * Hurd libihash

      * old

      * new

  * hurd-l4 libhurd-ihash

  * [[viengoos libhurd-ihash|microkernel/viengoos/projects/new_hash_function]]

    IRC, unknown channel, unknown date

        <neal> so, we need a new ihash implementation
        <neal> marcusb: When 80% full, the collision rate is very high.
        <neal> marcusb: I tested using 512mb / 4096 entries
        <neal> marcusb: Changing the load factor to 30% resulted in my program running more than an order of magnitude faster.
        <marcusb> yeah, it shouldn't get so full
        <marcusb> don't we do an exponential back-off in the array size?
        <marcusb> of course it's clear we can do much better
        <marcusb> the ihash algo is very simple
        <marcusb> I'm not even sure it makes much sense to have a generic library


# Alternatives?

  * glibc

      * include/inline-hashtab.h

      * locale/programs/simple-hash.h

      * misc/hsearch_r.c

      * NNS; cf. f46f0abfee5a2b34451708f2462a1c3b1701facd

  * libstdc++: `unordered_map`, `tr1/unordered_map`, `ext/hash_map`

  * <http://cmph.sourceforge.net/>

  * <http://libhashish.sourceforge.net/>

  * <http://www.azillionmonkeys.com/qed/hash.html>
