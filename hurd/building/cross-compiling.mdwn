[[meta copyright="Copyright Â© 2007 Free Software Foundation, Inc."]]
[[meta license="Permission is granted to copy, distribute and/or modify this
document under the terms of the GNU Free Documentation License, Version 1.2 or
any later version published by the Free Software Foundation; with no Invariant
Sections, no Front-Cover Texts, and no Back-Cover Texts.  A copy of the license
is included in the section entitled
[[GNU_Free_Documentation_License|/fdl]]."]]

# `cross-gnu`

[[Thomas_Schwinge|tschwinge]] has written a shell script for building a
complete cross-build environment for GNU/Hurd systems.

For now, find the shell scripts at
<http://nic-nac-project.de/~schwinge/tmp/cross-gnu> and
<http://nic-nac-project.de/~schwinge/tmp/cross-gnu-env>.


## Using

Read through it.  Understand it.  Only then use it by following the next steps.

/!\ Be made aware that -- while it is of course possible to build a working
cross-compiler -- this is not trivial to do.  You'll have to patch source
packages.  See the following list about needed patches, which have not yet been
installed in the upstream repositories.


### Supported Versions of Source Packages

The following ones are known to work.  Others may work as well, but no
guarantee is given.  Always the preferred version is listed first.

* `src/binutils`: [[GNU_Binutils|binutils]]

    * CVS `binutils-2_18-branch`

            $ mkdir binutils-2_18-branch
            $ cd binutils-2_18-branch
            $ cvs -d:pserver:anoncvs@sources.redhat.com:/cvs/src \
                co -r binutils-2_18-branch binutils

        The sources are rooted in `binutils-2_18-branch/src/`.  Also use these
        commands for updating, instead of the usual `cvs update`.

    * The 2.18 release tarball from <ftp://ftp.gnu.org/gnu/binutils/> should
        also be fine, as should be all other recent releases.

* `src/gcc`: [[GNU_Compiler_Collection|gcc]]

    * SVN `gcc-4_1-branch`

            $ svn co svn://gcc.gnu.org/svn/gcc/branches/gcc-4_1-branch

        Prepare:

            $ ( cd gcc-4_1-branch/ && contrib/gcc_update --touch )

    * Recent releases of the 4.1 series from <ftp://ftp.gnu.org/gnu/gcc/>
        should also be fine.

    * SVN `gcc-4_2-branch`

            $ svn co svn://gcc.gnu.org/svn/gcc/branches/gcc-4_2-branch

        Prepare:

            $ ( cd gcc-4_2-branch/ && contrib/gcc_update --touch )

        * Patches:
            <http://lists.gnu.org/archive/html/bug-hurd/2007-11/msg00034.html>

    * Recent releases of the 4.2 series from <ftp://ftp.gnu.org/gnu/gcc/>
        should also be fine, but need the same set of patches as the
        `gcc-4_2-branch` needs.

    Support for the upcoming 4.3 series (`trunk`) is being worked on.

* `src/gnumach`: [[GNU_Mach|microkernel/mach/gnumach]]

    * CVS `gnumach-1-branch`

            $ cvs -d:pserver:anoncvs@cvs.gnu.org:/cvsroot/hurd \
                co -r gnumach-1-branch gnumach
            $ mv gnumach gnumach-1-branch

        Prepare:

            $ ( cd gnumach-1-branch/ && autoreconf -vfi )

* `src/mig`: [[GNU_Mach_Interface_Generator|microkernel/mach/mig]]

    * CVS `HEAD`

            $ cvs -d:pserver:anoncvs@cvs.gnu.org:/cvsroot/hurd co mig

        Prepare:

            $ ( cd mig/ && autoreconf -vfi )

* `src/hurd`: [[GNU_Hurd|hurd]]

    * CVS `HEAD`

            $ cvs -d:pserver:anoncvs@cvs.gnu.org:/cvsroot/hurd co hurd

* `src/glibc`: [[GNU_C_Library|glibc]]

    * CVS `glibc-2_7-branch`

            $ cvs -d:pserver:anoncvs@sources.redhat.com:/cvs/glibc \
                co -r glibc-2_7-branch glibc
            $ mv libc glibc-2_7-branch

        * Patches:
            <http://lists.gnu.org/archive/html/bug-hurd/2007-11/msg00030.html>

    * Recent releases of the 2.7 series from <ftp://ftp.gnu.org/gnu/glibc/>
        should also be fine, but need the same set of patches as the
        `glibc-2_7-branch` needs.

<!--

    * CVS `HEAD`

            $ cvs -d:pserver:anoncvs@sources.redhat.com:/cvs/glibc \
                co glibc
            $ mv libc glibc-HEAD

        * TODO.
            <http://lists.gnu.org/archive/html/bug-hurd/2007-11/msg00026.html>

-->

<!--

* `src/gdb`: [[GNU_Debugger|gdb]]

    This is optional and will only be compiled if present.

    * CVS `gdb_6_6-branch`

            $ cvs -d:pserver:anoncvs@sources.redhat.com:/cvs/src \
                co -r gdb_6_6-branch gdb
            $ mv src gdb_6_6-branch

        Also needs some patch because of MIG changes, if I remember correctly.

    * Recent tarballs from <ftp://ftp.gnu.org/gnu/gdb/> should also work.

-->


### Preparation

Unpack the tarballs if you downloaded any.

Create a directory where the cross build shall be rooted in and a `src`
subdirectory in there.  Then create symbolic links for every of the above
packages: from `src/PACKAGE` to where you stored or unpacked it.  If you don't
intend to build several cross compilers or use the source trees otherwise, you
can also directly store the source trees in `src/`.  The source trees can be
shared between multiple cross build trees since the packages' build systems are
supposed not to modify the files in the source trees.  Not all packages adhere
to that, but they fail to do so only for pre-processed documentation, etc.

Either make sure that `cross-gnu-env` and `cross-gnu` are found in `$PATH`
(`~/bin/`, for example) or alternatively remember to use their full paths in
the following.

The system you're running the script on (the *build* system) needs to have a
basic compiling environment installed, i.e., a C compiler with the basic
libraries and `make`.  You might also need `flex` and `bison`.  For building
recent version of GCC (e.g., the upcoming 4.3, which is not yet supported)
you'll need to have development packages of GMP and MPFR installed.


### Setting Up the Environment

Do this every time you intend to use the cross compiler:

    $ ROOT=to/the/cross/build/root
    $ . cross-gnu-env

This will set several environment variables, which are later used by (a) the
`cross-gnu` script and (b) by you, the user of the cross compiler.  `$TARGET`
will be set by the script, `$PATH` will be adjusted, etc.  See the
`cross-gnu-env` file for all environment variables that are set, as well as
their default values.  `$ROOT` will be made an absolute path if it isn't
already.

Later, you'll be able to do things like `../configure --host="$TARGET"` and the
cross compiler will be found automatically.


### Creating the Cross Build Environment

After setting up the environemt, just run `cross-gnu` and watch the messages
flow by.  In the end you should see a message: *[...]/cross-gnu: Everything
should be in place now.*


### Makefile

The following Makefile has been written to automate the above steps. You will require Internet connection and atleast 1.5 GB of hard-disk spaace. Just run:

<pre>
  make
</pre>

to build the toolchain. To clean-up, use:

<pre>
  make clean
</pre>

<pre>
# "HurdToolchainMakefile" - a Makefile for setting up Hurd toolchain builds
#
# Copyright (c) 2007  Shakthi Kannan <shakthi.kannan@qvantel.com>
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# version 2 as published by the Free Software Foundation.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor,
# Boston, MA  02110-1301, USA

## Variables
TOPDIR=.
DOWNLOADS=${TOPDIR}/downloads
ROOT=${TOPDIR}/root
SRC=${ROOT}/src
GLIBC_DIR=${SRC}/glibc
PATCH0_DIR=patch0
PATCH1_DIR=patch1

## Patches
PATCH1 = 0003-2007-09-13-H.J.-Lu-hongjiu.lu-intel.com.patch \
	0005-Hurd-specific-kernel-features.h.patch \
	0007-2007-10-05-version-of-stat.patch.patch \
	0008-r2425-of-debian-patches-hurd-i386-local-atomic-no-mu.patch \
	0010-r2425-of-debian-patches-hurd-i386-local-gscope.diff.patch \
	0012-r2425-of-debian-patches-hurd-i386-local-no-strerror_.patch \
	0013-r2626-of-debian-patches-hurd-i386-local-tls-support.patch \
	0014-r2591-of-debian-patches-hurd-i386-local-tls.diff.patch \
	0015-r2630-of-debian-patches-hurd-i386-submitted-libc_onc.patch \
	0016-Include-stdint.h.patch \
	0017-r2598-of-debian-patches-any-local-stdio-lock.diff.patch \
	0018-r2650-of-debian-patches-hurd-i386-submitted-strtoul.patch \
	0019-2007-11-12-Aurelien-Jarno-aurelien-aurel32.net-Tho.patch \
	0020-r2656-of-debian-patches-any-submitted-sched_h.diff.patch \
	0022-2007-11-18-Roland-McGrath-roland-frob.com.patch

PATCH0 = 0009-2007-07-22-version-of-init-first.c_vs._GCC_4.1.patch.patch \
	0011-2007-02-08-version-of-resolv_res_send.c.patch.patch

all: create_dir get_sources apply_glibc_patches build_all

## Create directories
create_dir:
	cd ${TOPDIR}
	mkdir ${DOWNLOADS}
	mkdir -p ${SRC}

get_sources: get_cross_gnu get_binutils get_gcc get_gnumach get_mig get_hurd get_glibc

get_cross_gnu:
	@ echo "  ___ _ __ ___  ___ ___        __ _ _ __  _   _ "
	@ echo " / __| '__/ _ \/ __/ __|_____ / _\` | '_ \| | | |"
	@ echo "| (__| | | (_) \__ \__ \_____| (_| | | | | |_| |"
	@ echo " \___|_|  \___/|___/___/      \__, |_| |_|\__,_|"
	@ echo "                              |___/             "
	cd ${DOWNLOADS}; \
	wget http://nic-nac-project.de/~schwinge/tmp/cross-gnu
	@ echo "  ___ _ __ ___  ___ ___        __ _ _ __  _   _        ___ _ ____   __" 
	@ echo " / __| '__/ _ \/ __/ __|_____ / _\` | '_ \| | | |_____ / _ \ '_ \ \ / /"
	@ echo "| (__| | | (_) \__ \__ \_____| (_| | | | | |_| |_____|  __/ | | \ V / " 
	@ echo " \___|_|  \___/|___/___/      \__, |_| |_|\__,_|      \___|_| |_|\_/  " 
	@ echo "                              |___/                                   " 
	cd ${DOWNLOADS}; \
	wget http://nic-nac-project.de/~schwinge/tmp/cross-gnu-env; \
	chmod +x cross-gnu; \
	chmod +x cross-gnu-env

get_binutils:
	@ echo " _     _             _   _ _     "
	@ echo "| |__ (_)_ __  _   _| |_(_) |___ "
	@ echo "| '_ \| | '_ \| | | | __| | / __|"
	@ echo "| |_) | | | | | |_| | |_| | \__ \\"
	@ echo "|_.__/|_|_| |_|\__,_|\__|_|_|___/"
	cd ${SRC}; \
	cvs -d:pserver:anoncvs@sources.redhat.com:/cvs/src co -r binutils-2_18-branch binutils; \
	mv src binutils

get_gcc:
	@ echo "  __ _  ___ ___ "
	@ echo " / _\` |/ __/ __|"
	@ echo "| (_| | (_| (__ "
	@ echo " \__, |\___\___|"
	@ echo " |___/          "
	cd ${SRC}; \
	svn co svn://gcc.gnu.org/svn/gcc/branches/gcc-4_1-branch; \
	mv gcc-4_1-branch gcc; \
	( cd gcc/ && contrib/gcc_update --touch )

get_gnumach:
	@ echo "                                        _     "
	@ echo "  __ _ _ __  _   _ _ __ ___   __ _  ___| |__  "
	@ echo " / _\` | '_ \| | | | '_ \` _ \ / _\` |/ __| '_ \ "
	@ echo "| (_| | | | | |_| | | | | | | (_| | (__| | | |"
	@ echo " \__, |_| |_|\__,_|_| |_| |_|\__,_|\___|_| |_|"
	@ echo " |___/                                        "
	cd ${SRC}; \
	cvs -d:pserver:anoncvs@cvs.gnu.org:/cvsroot/hurd co -r gnumach-1-branch gnumach; \
	( cd gnumach/ && autoreconf -vfi )

get_mig:
	@ echo "           _       "
	@ echo " _ __ ___ (_) __ _ "
	@ echo "| '_ \` _ \| |/ _\` |"
	@ echo "| | | | | | | (_| |"
	@ echo "|_| |_| |_|_|\__, |"
	@ echo "             |___/ "
	cd ${SRC}; \
	cvs -d:pserver:anoncvs@cvs.gnu.org:/cvsroot/hurd co mig; \
	( cd mig/ && autoreconf -vfi )

get_hurd:
	@ echo " _                   _ "
	@ echo "| |__  _   _ _ __ __| |"
	@ echo "| '_ \| | | | '__/ _\` |"
	@ echo "| | | | |_| | | | (_| |"
	@ echo "|_| |_|\__,_|_|  \__,_|"
	cd ${SRC}; \
	cvs -d:pserver:anoncvs@cvs.gnu.org:/cvsroot/hurd co hurd

get_glibc:
	@ echo "       _ _ _          "
	@ echo "  __ _| (_) |__   ___ "
	@ echo " / _\` | | | '_ \ / __|"
	@ echo "| (_| | | | |_) | (__ "
	@ echo " \__, |_|_|_.__/ \___|"
	@ echo " |___/                "
	cd ${SRC}; \
	cvs -d:pserver:anoncvs@sources.redhat.com:/cvs/glibc co -r glibc-2_7-branch glibc; \
	mv libc glibc
	mkdir ${GLIBC_DIR}/${PATCH0_DIR}
	mkdir ${GLIBC_DIR}/${PATCH1_DIR}

get_patch0: $(PATCH0)

get_patch1: $(PATCH1)

$(PATCH1):
	wget -r -np -nd -P ${GLIBC_DIR}/${PATCH1_DIR} http://www.schwinge.homeip.net/~thomas/tmp/glibc-patches/$@ 
	cd ${GLIBC_DIR}; \
	patch -p1 < ${PATCH1_DIR}/$@

$(PATCH0): 
	wget -r -np -nd -P ${GLIBC_DIR}/${PATCH0_DIR} http://www.schwinge.homeip.net/~thomas/tmp/glibc-patches/$@
	cd ${GLIBC_DIR}; \
	patch -p0 < ${PATCH0_DIR}/$@

apply_glibc_patches: get_patch0 get_patch1

build_all:
	ROOT=${TOPDIR}/root ; \
	export PATH="$(PATH):$(DOWNLOADS)" ; \
	echo $$PATH ; \
	. ${DOWNLOADS}/cross-gnu-env ; \
	${DOWNLOADS}/cross-gnu

clean:
	rm -rf downloads root *~
</pre>

### Staying Up-To-Date

You can re-run `cross-gnu` to rebuild the parts of the sources that have
changed since the last run.  This will save a lot of time compared to starting
from scratch again.  Also, it is especially useful if you aren't working with
unpacked tarballs, but on CVS's branches or want to quickly get a new tool
chain with patches you applied to the source trees.  However: do *not* use this
technique when doing major changes to the source trees, like switching from GCC
4.0 to GCC 4.1.


#### Comment

Unfortunately the GNU Automake build system (which is used by GNU Mach's
`gnumach-1-branch`) will overwrite installed files (header files in this case
here), even if they didn't change.  And because all packages' build systems are
using dependency tracking, a lot of files will be rebuilt each time `cross-gnu`
is re-run, even if the files themselves didn't change.  Talk to [[tschwinge]]
if you want to work on fixing that -- it is already clear what needs to be
done, it just hasn't been done yet.


# References

* <http://lists.gnu.org/archive/html/bug-hurd/2004-09/msg00030.html>
