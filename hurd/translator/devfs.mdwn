[[!meta copyright="Copyright Â© 2009, 2012 Free Software Foundation, Inc."]]

[[!meta license="""[[!toggle id="license" text="GFDL 1.2+"]][[!toggleable
id="license" text="Permission is granted to copy, distribute and/or modify this
document under the terms of the GNU Free Documentation License, Version 1.2 or
any later version published by the Free Software Foundation; with no Invariant
Sections, no Front-Cover Texts, and no Back-Cover Texts.  A copy of the license
is included in the section entitled [[GNU Free Documentation
License|/fdl]]."]]"""]]

`devfs` is a translator sitting on `/dev` and providing what is to be provided
in there in a dynamic fashion -- as compared to static passive translator
settings as they're used now.

`devfs` has not yet been written.

---

If applicable, it has to be taken care that all code concerning the page-in
path is resident at all times.

---

# IRC, freenode, #hurd, 2012-01-29

    <pinotree> what would be an hurdish way to achieve something like the
      various system (udev, devfs, devd, etc) for populating devices files
      automatically according to the found system devices?
    <pinotree> (not that i plan anything about that, just curious)
    <youpi> it's not really a stupid question at all :)
    <youpi> I guess translators in /dev
    <youpi> such as a blockfs on /dev/block
    <antrik> pinotree: in an ideal world (userspace drivers and all), the
      device nodes will be exported by the drivers themselfs; and the drivers
      will be launched by the bus respective bus driver
    <antrik> an interesting aspect is what to do if we want a traditional flat
      /dev directory with unique device names... probably need some
      unionfs-like translator that collects the individual driver nodes in an
      intelligent manner
